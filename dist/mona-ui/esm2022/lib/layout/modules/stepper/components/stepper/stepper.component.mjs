import { ChangeDetectionStrategy, Component, ContentChild, EventEmitter, Input, Output } from "@angular/core";
import { Step } from "../../models/Step";
import { Enumerable } from "@mirei/ts-collections";
import { StepperLabelTemplateDirective } from "../../directives/stepper-label-template.directive";
import { StepperIndicatorTemplateDirective } from "../../directives/stepper-indicator-template.directive";
import { StepperStepTemplateDirective } from "../../directives/stepper-step-template.directive";
import { fromEvent, Subject, takeUntil } from "rxjs";
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export class StepperComponent {
    set step(step) {
        if (this.stepList.length > 0) {
            this.setActiveStep(this.stepList[step]);
        }
    }
    get step() {
        return this.activeStep ? this.activeStep.index : 0;
    }
    set steps(steps) {
        this.stepList = steps.map((s, ix) => {
            const step = new Step(s);
            step.index = ix;
            return step;
        });
    }
    constructor(elementRef, cdr) {
        this.elementRef = elementRef;
        this.cdr = cdr;
        this.componentDestroy$ = new Subject();
        this.activeStep = null;
        this.stepList = [];
        this.indicatorTemplateDirective = null;
        this.linear = false;
        this.labelTemplateDirective = null;
        this.orientation = "horizontal";
        this.stepTemplateDirective = null;
        this.stepChange = new EventEmitter();
    }
    ngOnDestroy() {
        this.componentDestroy$.next();
        this.componentDestroy$.complete();
    }
    ngOnInit() {
        if (!this.activeStep) {
            this.setActiveStep(this.stepList[0], true);
        }
        this.setSubscriptions();
    }
    onStepClick(step) {
        const changed = this.setActiveStep(step);
        if (changed) {
            this.stepChange.emit(step.index);
        }
    }
    setActiveStep(step, bypassLinear = false) {
        if (this.activeStep === step) {
            return false;
        }
        if (!this.linear) {
            this.activeStep = step;
            Enumerable.from(this.stepList).forEach(s => (s.active = s.index <= step.index));
            return true;
        }
        else {
            if (this.activeStep && (this.activeStep.index + 1 === step.index || step.index <= this.activeStep.index)) {
                this.activeStep = step;
                Enumerable.from(this.stepList).forEach(s => (s.active = s.index <= step.index));
                return true;
            }
            else if (!this.activeStep) {
                if (bypassLinear || (!bypassLinear && step.index === 0)) {
                    this.activeStep = step;
                    Enumerable.from(this.stepList).forEach(s => (s.active = s.index <= step.index));
                    return true;
                }
            }
        }
        return false;
    }
    setSubscriptions() {
        fromEvent(this.elementRef.nativeElement, "keydown")
            .pipe(takeUntil(this.componentDestroy$))
            .subscribe((event) => {
            if (!this.activeStep) {
                this.activeStep = this.stepList[0];
                return;
            }
            if (event.key === "ArrowLeft") {
                const index = this.activeStep.index - 1;
                if (index >= 0) {
                    this.setActiveStep(this.stepList[index]);
                }
            }
            else if (event.key === "ArrowRight") {
                const index = this.activeStep.index + 1;
                if (index < this.stepList.length) {
                    this.setActiveStep(this.stepList[index]);
                }
            }
            this.cdr.detectChanges();
        });
    }
    get gridTemplateColumns() {
        return {
            gridTemplateColumns: this.orientation === "horizontal" ? `repeat(${this.stepList.length * 2}, 1fr)` : undefined,
            gridTemplateRows: this.orientation === "vertical" ? `repeat(${this.stepList.length * 2}, 1fr)` : undefined
        };
    }
    get trackInnerStyles() {
        return {
            width: this.orientation === "horizontal" ? this.trackLength : undefined,
            height: this.orientation === "vertical" ? this.trackLength : undefined
        };
    }
    get trackItemSize() {
        return this.stepList.length !== 0 ? 100 / this.stepList.length : 0;
    }
    get trackItemStyles() {
        return {
            maxWidth: this.orientation === "horizontal" ? `${this.trackItemSize}%` : undefined,
            maxHeight: this.orientation === "vertical" ? `${this.trackItemSize}%` : undefined
        };
    }
    get trackLength() {
        return !this.activeStep ? "0%" : `${(100 / (this.stepList.length - 1)) * this.activeStep.index}%`;
    }
    get trackStyles() {
        return {
            gridColumn: this.orientation === "horizontal"
                ? this.activeStep
                    ? `2/${this.stepList.length * 2}`
                    : undefined
                : undefined,
            gridRow: this.orientation === "vertical"
                ? this.activeStep
                    ? `2/${this.stepList.length * 2}`
                    : undefined
                : undefined
        };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: StepperComponent, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.0.0", type: StepperComponent, selector: "mona-stepper", inputs: { linear: "linear", orientation: "orientation", step: "step", steps: "steps" }, outputs: { stepChange: "stepChange" }, queries: [{ propertyName: "indicatorTemplateDirective", first: true, predicate: StepperIndicatorTemplateDirective, descendants: true }, { propertyName: "labelTemplateDirective", first: true, predicate: StepperLabelTemplateDirective, descendants: true }, { propertyName: "stepTemplateDirective", first: true, predicate: StepperStepTemplateDirective, descendants: true }], ngImport: i0, template: "<div class=\"mona-stepper\" [ngStyle]=\"gridTemplateColumns\" [ngClass]=\"{'mona-stepper-vertical': orientation==='vertical', 'mona-stepper-linear': linear}\" [attr.tabindex]=\"1\">\n    <ol class=\"mona-stepper-step-list\" [ngClass]=\"{'mona-stepper-step-list-horizontal': orientation==='horizontal', 'mona-stepper-step-list-vertical': orientation==='vertical'}\">\n        <li *ngFor=\"let step of stepList\"\n            [ngStyle]=\"trackItemStyles\"\n            (click)=\"onStepClick(step)\">\n            <div>\n                <ng-container *ngIf=\"!stepTemplateDirective\">\n                    <span [ngClass]=\"{'mona-stepper-step-active': step.active}\">\n                        <ng-container *ngIf=\"!indicatorTemplateDirective\">{{step.index}}</ng-container>\n                        <ng-container *ngIf=\"indicatorTemplateDirective\" [ngTemplateOutlet]=\"indicatorTemplateDirective.templateRef\"\n                                      [ngTemplateOutletContext]=\"{$implicit: step.options, index: step.index, active: step.active}\"></ng-container>\n                    </span>\n                </ng-container>\n                <ng-container *ngIf=\"stepTemplateDirective\">\n                    <ng-container [ngTemplateOutlet]=\"stepTemplateDirective.templateRef\"\n                                  [ngTemplateOutletContext]=\"{$implicit: step.options, index: step.index, active: step.active}\"></ng-container>\n                </ng-container>\n\n                <span *ngIf=\"!labelTemplateDirective\">{{step.options.label}}</span>\n                <ng-container *ngIf=\"labelTemplateDirective\" [ngTemplateOutlet]=\"labelTemplateDirective?.templateRef ?? null\"\n                              [ngTemplateOutletContext]=\"{$implicit: step.options, index: step.index, active: step.active}\"></ng-container>\n            </div>\n        </li>\n    </ol>\n    <div class=\"mona-stepper-track\" [ngStyle]=\"trackStyles\" [ngClass]=\"{'mona-stepper-track-horizontal': orientation==='horizontal', 'mona-stepper-track-vertical': orientation==='vertical'}\">\n        <div [ngStyle]=\"trackInnerStyles\"></div>\n    </div>\n</div>\n", styles: ["div.mona-stepper{position:relative;width:auto;display:grid;outline:none}div.mona-stepper-vertical{height:100%}ol.mona-stepper-step-list{position:absolute;display:flex;list-style:none}ol.mona-stepper-step-list li{display:flex;align-items:center;justify-content:center;flex:1 0 auto}ol.mona-stepper-step-list li div{display:flex;width:100%;align-items:center;z-index:1;cursor:pointer}ol.mona-stepper-step-list li div>span:first-child{width:var(--mona-input-height);height:var(--mona-input-height);display:flex;align-items:center;justify-content:center;background-color:var(--mona-background);border:1px solid var(--mona-border-color);color:var(--mona-text);transition:background-color .15s ease-out,color .15s ease-out}ol.mona-stepper-step-list li div>span:first-child.mona-stepper-step-active{background-color:var(--mona-primary)}ol.mona-stepper-step-list li div>span:last-child{color:var(--mona-text);transition:color .15s ease-in-out}ol.mona-stepper-step-list-horizontal{grid-column:1/-1;flex-direction:row;width:100%}ol.mona-stepper-step-list-horizontal>li>div:first-child{flex-direction:column;row-gap:5px}ol.mona-stepper-step-list-vertical{grid-row:1/-1;flex-direction:column;height:100%;width:max-content;left:calc(-1 * (var(--mona-input-height) - 8px) / 2)}ol.mona-stepper-step-list-vertical>li>div:first-child{flex-direction:row;column-gap:5px}div.mona-stepper-track{position:relative;display:grid;background-color:var(--mona-background);border:1px solid var(--mona-border-color)}div.mona-stepper-track>div{position:absolute;background-color:var(--mona-primary)}div.mona-stepper-track-horizontal{width:100%;height:8px;top:calc((var(--mona-input-height) - 8px) / 2)}div.mona-stepper-track-horizontal>div{height:100%;transition:width .15s ease-in-out}div.mona-stepper-track-vertical{height:100%;width:8px}div.mona-stepper-track-vertical>div{width:100%;transition:height .15s ease-in-out}\n"], dependencies: [{ kind: "directive", type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: i1.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: StepperComponent, decorators: [{
            type: Component,
            args: [{ selector: "mona-stepper", changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"mona-stepper\" [ngStyle]=\"gridTemplateColumns\" [ngClass]=\"{'mona-stepper-vertical': orientation==='vertical', 'mona-stepper-linear': linear}\" [attr.tabindex]=\"1\">\n    <ol class=\"mona-stepper-step-list\" [ngClass]=\"{'mona-stepper-step-list-horizontal': orientation==='horizontal', 'mona-stepper-step-list-vertical': orientation==='vertical'}\">\n        <li *ngFor=\"let step of stepList\"\n            [ngStyle]=\"trackItemStyles\"\n            (click)=\"onStepClick(step)\">\n            <div>\n                <ng-container *ngIf=\"!stepTemplateDirective\">\n                    <span [ngClass]=\"{'mona-stepper-step-active': step.active}\">\n                        <ng-container *ngIf=\"!indicatorTemplateDirective\">{{step.index}}</ng-container>\n                        <ng-container *ngIf=\"indicatorTemplateDirective\" [ngTemplateOutlet]=\"indicatorTemplateDirective.templateRef\"\n                                      [ngTemplateOutletContext]=\"{$implicit: step.options, index: step.index, active: step.active}\"></ng-container>\n                    </span>\n                </ng-container>\n                <ng-container *ngIf=\"stepTemplateDirective\">\n                    <ng-container [ngTemplateOutlet]=\"stepTemplateDirective.templateRef\"\n                                  [ngTemplateOutletContext]=\"{$implicit: step.options, index: step.index, active: step.active}\"></ng-container>\n                </ng-container>\n\n                <span *ngIf=\"!labelTemplateDirective\">{{step.options.label}}</span>\n                <ng-container *ngIf=\"labelTemplateDirective\" [ngTemplateOutlet]=\"labelTemplateDirective?.templateRef ?? null\"\n                              [ngTemplateOutletContext]=\"{$implicit: step.options, index: step.index, active: step.active}\"></ng-container>\n            </div>\n        </li>\n    </ol>\n    <div class=\"mona-stepper-track\" [ngStyle]=\"trackStyles\" [ngClass]=\"{'mona-stepper-track-horizontal': orientation==='horizontal', 'mona-stepper-track-vertical': orientation==='vertical'}\">\n        <div [ngStyle]=\"trackInnerStyles\"></div>\n    </div>\n</div>\n", styles: ["div.mona-stepper{position:relative;width:auto;display:grid;outline:none}div.mona-stepper-vertical{height:100%}ol.mona-stepper-step-list{position:absolute;display:flex;list-style:none}ol.mona-stepper-step-list li{display:flex;align-items:center;justify-content:center;flex:1 0 auto}ol.mona-stepper-step-list li div{display:flex;width:100%;align-items:center;z-index:1;cursor:pointer}ol.mona-stepper-step-list li div>span:first-child{width:var(--mona-input-height);height:var(--mona-input-height);display:flex;align-items:center;justify-content:center;background-color:var(--mona-background);border:1px solid var(--mona-border-color);color:var(--mona-text);transition:background-color .15s ease-out,color .15s ease-out}ol.mona-stepper-step-list li div>span:first-child.mona-stepper-step-active{background-color:var(--mona-primary)}ol.mona-stepper-step-list li div>span:last-child{color:var(--mona-text);transition:color .15s ease-in-out}ol.mona-stepper-step-list-horizontal{grid-column:1/-1;flex-direction:row;width:100%}ol.mona-stepper-step-list-horizontal>li>div:first-child{flex-direction:column;row-gap:5px}ol.mona-stepper-step-list-vertical{grid-row:1/-1;flex-direction:column;height:100%;width:max-content;left:calc(-1 * (var(--mona-input-height) - 8px) / 2)}ol.mona-stepper-step-list-vertical>li>div:first-child{flex-direction:row;column-gap:5px}div.mona-stepper-track{position:relative;display:grid;background-color:var(--mona-background);border:1px solid var(--mona-border-color)}div.mona-stepper-track>div{position:absolute;background-color:var(--mona-primary)}div.mona-stepper-track-horizontal{width:100%;height:8px;top:calc((var(--mona-input-height) - 8px) / 2)}div.mona-stepper-track-horizontal>div{height:100%;transition:width .15s ease-in-out}div.mona-stepper-track-vertical{height:100%;width:8px}div.mona-stepper-track-vertical>div{width:100%;transition:height .15s ease-in-out}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { indicatorTemplateDirective: [{
                type: ContentChild,
                args: [StepperIndicatorTemplateDirective]
            }], linear: [{
                type: Input
            }], labelTemplateDirective: [{
                type: ContentChild,
                args: [StepperLabelTemplateDirective]
            }], orientation: [{
                type: Input
            }], stepTemplateDirective: [{
                type: ContentChild,
                args: [StepperStepTemplateDirective]
            }], step: [{
                type: Input
            }], steps: [{
                type: Input
            }], stepChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RlcHBlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9tb25hLXVpL3NyYy9saWIvbGF5b3V0L21vZHVsZXMvc3RlcHBlci9jb21wb25lbnRzL3N0ZXBwZXIvc3RlcHBlci5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9tb25hLXVpL3NyYy9saWIvbGF5b3V0L21vZHVsZXMvc3RlcHBlci9jb21wb25lbnRzL3N0ZXBwZXIvc3RlcHBlci5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0gsdUJBQXVCLEVBRXZCLFNBQVMsRUFDVCxZQUFZLEVBRVosWUFBWSxFQUNaLEtBQUssRUFHTCxNQUFNLEVBQ1QsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLElBQUksRUFBZSxNQUFNLG1CQUFtQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNuRCxPQUFPLEVBQUUsNkJBQTZCLEVBQUUsTUFBTSxtREFBbUQsQ0FBQztBQUNsRyxPQUFPLEVBQUUsaUNBQWlDLEVBQUUsTUFBTSx1REFBdUQsQ0FBQztBQUMxRyxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSxrREFBa0QsQ0FBQztBQUNoRyxPQUFPLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxNQUFNLENBQUM7OztBQVFyRCxNQUFNLE9BQU8sZ0JBQWdCO0lBb0J6QixJQUNXLElBQUksQ0FBQyxJQUFZO1FBQ3hCLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQzFCLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1NBQzNDO0lBQ0wsQ0FBQztJQUVELElBQVcs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QUFNLEdBQUcsQ0FBQyxFQUFFO29CQUNqQyxDQUFDLENBQUMsU0FBUztnQkFDZixDQUFDLENBQUMsU0FBUztTQUN0QixDQUFDO0lBQ04sQ0FBQzs4R0E1SlEsZ0JBQWdCO2tHQUFoQixnQkFBZ0IsMk9BS1gsaUNBQWlDLHlGQU1qQyw2QkFBNkIsd0ZBTTdCLDRCQUE0QixnREMxQzlDLCtsRUE0QkE7OzJGREhhLGdCQUFnQjtrQkFONUIsU0FBUzsrQkFDSSxjQUFjLG1CQUdQLHVCQUF1QixDQUFDLE1BQU07aUlBUXhDLDBCQUEwQjtzQkFEaEMsWUFBWTt1QkFBQyxpQ0FBaUM7Z0JBSXhDLE1BQU07c0JBRFosS0FBSztnQkFJQyxzQkFBc0I7c0JBRDVCLFlBQVk7dUJBQUMsNkJBQTZCO2dCQUlwQyxXQUFXO3NCQURqQixLQUFLO2dCQUlDLHFCQUFxQjtzQkFEM0IsWUFBWTt1QkFBQyw0QkFBNEI7Z0JBSS9CLElBQUk7c0JBRGQsS0FBSztnQkFZSyxLQUFLO3NCQURmLEtBQUs7Z0JBVUMsVUFBVTtzQkFEaEIsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gICAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgQ29tcG9uZW50LFxuICAgIENvbnRlbnRDaGlsZCxcbiAgICBFbGVtZW50UmVmLFxuICAgIEV2ZW50RW1pdHRlcixcbiAgICBJbnB1dCxcbiAgICBPbkRlc3Ryb3ksXG4gICAgT25Jbml0LFxuICAgIE91dHB1dFxufSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgU3RlcCwgU3RlcE9wdGlvbnMgfSBmcm9tIFwiLi4vLi4vbW9kZWxzL1N0ZXBcIjtcbmltcG9ydCB7IEVudW1lcmFibGUgfSBmcm9tIFwiQG1pcmVpL3RzLWNvbGxlY3Rpb25zXCI7XG5pbXBvcnQgeyBTdGVwcGVyTGFiZWxUZW1wbGF0ZURpcmVjdGl2ZSB9IGZyb20gXCIuLi8uLi9kaXJlY3RpdmVzL3N0ZXBwZXItbGFiZWwtdGVtcGxhdGUuZGlyZWN0aXZlXCI7XG5pbXBvcnQgeyBTdGVwcGVySW5kaWNhdG9yVGVtcGxhdGVEaXJlY3RpdmUgfSBmcm9tIFwiLi4vLi4vZGlyZWN0aXZlcy9zdGVwcGVyLWluZGljYXRvci10ZW1wbGF0ZS5kaXJlY3RpdmVcIjtcbmltcG9ydCB7IFN0ZXBwZXJTdGVwVGVtcGxhdGVEaXJlY3RpdmUgfSBmcm9tIFwiLi4vLi4vZGlyZWN0aXZlcy9zdGVwcGVyLXN0ZXAtdGVtcGxhdGUuZGlyZWN0aXZlXCI7XG5pbXBvcnQgeyBmcm9tRXZlbnQsIFN1YmplY3QsIHRha2VVbnRpbCB9IGZyb20gXCJyeGpzXCI7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiBcIm1vbmEtc3RlcHBlclwiLFxuICAgIHRlbXBsYXRlVXJsOiBcIi4vc3RlcHBlci5jb21wb25lbnQuaHRtbFwiLFxuICAgIHN0eWxlVXJsczogW1wiLi9zdGVwcGVyLmNvbXBvbmVudC5zY3NzXCJdLFxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXG59KVxuZXhwb3J0IGNsYXNzIFN0ZXBwZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG4gICAgcHJpdmF0ZSByZWFkb25seSBjb21wb25lbnREZXN0cm95JDogU3ViamVjdDx2b2lkPiA9IG5ldyBTdWJqZWN0PHZvaWQ+KCk7XG4gICAgcHVibGljIGFjdGl2ZVN0ZXA6IFN0ZXAgfCBudWxsID0gbnVsbDtcbiAgICBwdWJsaWMgc3RlcExpc3Q6IFN0ZXBbXSA9IFtdO1xuXG4gICAgQENvbnRlbnRDaGlsZChTdGVwcGVySW5kaWNhdG9yVGVtcGxhdGVEaXJlY3RpdmUpXG4gICAgcHVibGljIGluZGljYXRvclRlbXBsYXRlRGlyZWN0aXZlOiBTdGVwcGVySW5kaWNhdG9yVGVtcGxhdGVEaXJlY3RpdmUgfCBudWxsID0gbnVsbDtcblxuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIGxpbmVhcjogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgQENvbnRlbnRDaGlsZChTdGVwcGVyTGFiZWxUZW1wbGF0ZURpcmVjdGl2ZSlcbiAgICBwdWJsaWMgbGFiZWxUZW1wbGF0ZURpcmVjdGl2ZTogU3RlcHBlckxhYmVsVGVtcGxhdGVEaXJlY3RpdmUgfCBudWxsID0gbnVsbDtcblxuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIG9yaWVudGF0aW9uOiBcImhvcml6b250YWxcIiB8IFwidmVydGljYWxcIiA9IFwiaG9yaXpvbnRhbFwiO1xuXG4gICAgQENvbnRlbnRDaGlsZChTdGVwcGVyU3RlcFRlbXBsYXRlRGlyZWN0aXZlKVxuICAgIHB1YmxpYyBzdGVwVGVtcGxhdGVEaXJlY3RpdmU6IFN0ZXBwZXJTdGVwVGVtcGxhdGVEaXJlY3RpdmUgfCBudWxsID0gbnVsbDtcblxuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIHNldCBzdGVwKHN0ZXA6IG51bWJlcikge1xuICAgICAgICBpZiAodGhpcy5zdGVwTGlzdC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0aGlzLnNldEFjdGl2ZVN0ZXAodGhpcy5zdGVwTGlzdFtzdGVwXSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IHN0ZXAoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWN0aXZlU3RlcCA/IHRoaXMuYWN0aXZlU3RlcC5pbmRleCA6IDA7XG4gICAgfVxuXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgc2V0IHN0ZXBzKHN0ZXBzOiBTdGVwT3B0aW9uc1tdKSB7XG4gICAgICAgIHRoaXMuc3RlcExpc3QgPSBzdGVwcy5tYXAoKHMsIGl4KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBzdGVwID0gbmV3IFN0ZXAocyk7XG4gICAgICAgICAgICBzdGVwLmluZGV4ID0gaXg7XG4gICAgICAgICAgICByZXR1cm4gc3RlcDtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgQE91dHB1dCgpXG4gICAgcHVibGljIHN0ZXBDaGFuZ2U6IEV2ZW50RW1pdHRlcjxudW1iZXI+ID0gbmV3IEV2ZW50RW1pdHRlcjxudW1iZXI+KCk7XG5cbiAgICBwdWJsaWMgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBlbGVtZW50UmVmOiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PiwgcHJpdmF0ZSByZWFkb25seSBjZHI6IENoYW5nZURldGVjdG9yUmVmKSB7fVxuXG4gICAgcHVibGljIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgICAgICB0aGlzLmNvbXBvbmVudERlc3Ryb3kkLm5leHQoKTtcbiAgICAgICAgdGhpcy5jb21wb25lbnREZXN0cm95JC5jb21wbGV0ZSgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICAgICAgaWYgKCF0aGlzLmFjdGl2ZVN0ZXApIHtcbiAgICAgICAgICAgIHRoaXMuc2V0QWN0aXZlU3RlcCh0aGlzLnN0ZXBMaXN0WzBdLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNldFN1YnNjcmlwdGlvbnMoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgb25TdGVwQ2xpY2soc3RlcDogU3RlcCk6IHZvaWQge1xuICAgICAgICBjb25zdCBjaGFuZ2VkID0gdGhpcy5zZXRBY3RpdmVTdGVwKHN0ZXApO1xuICAgICAgICBpZiAoY2hhbmdlZCkge1xuICAgICAgICAgICAgdGhpcy5zdGVwQ2hhbmdlLmVtaXQoc3RlcC5pbmRleCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0QWN0aXZlU3RlcChzdGVwOiBTdGVwLCBieXBhc3NMaW5lYXI6IGJvb2xlYW4gPSBmYWxzZSk6IGJvb2xlYW4ge1xuICAgICAgICBpZiAodGhpcy5hY3RpdmVTdGVwID09PSBzdGVwKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLmxpbmVhcikge1xuICAgICAgICAgICAgdGhpcy5hY3RpdmVTdGVwID0gc3RlcDtcbiAgICAgICAgICAgIEVudW1lcmFibGUuZnJvbSh0aGlzLnN0ZXBMaXN0KS5mb3JFYWNoKHMgPT4gKHMuYWN0aXZlID0gcy5pbmRleCA8PSBzdGVwLmluZGV4KSk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmFjdGl2ZVN0ZXAgJiYgKHRoaXMuYWN0aXZlU3RlcC5pbmRleCArIDEgPT09IHN0ZXAuaW5kZXggfHwgc3RlcC5pbmRleCA8PSB0aGlzLmFjdGl2ZVN0ZXAuaW5kZXgpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hY3RpdmVTdGVwID0gc3RlcDtcbiAgICAgICAgICAgICAgICBFbnVtZXJhYmxlLmZyb20odGhpcy5zdGVwTGlzdCkuZm9yRWFjaChzID0+IChzLmFjdGl2ZSA9IHMuaW5kZXggPD0gc3RlcC5pbmRleCkpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfSBlbHNlIGlmICghdGhpcy5hY3RpdmVTdGVwKSB7XG4gICAgICAgICAgICAgICAgaWYgKGJ5cGFzc0xpbmVhciB8fCAoIWJ5cGFzc0xpbmVhciAmJiBzdGVwLmluZGV4ID09PSAwKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFjdGl2ZVN0ZXAgPSBzdGVwO1xuICAgICAgICAgICAgICAgICAgICBFbnVtZXJhYmxlLmZyb20odGhpcy5zdGVwTGlzdCkuZm9yRWFjaChzID0+IChzLmFjdGl2ZSA9IHMuaW5kZXggPD0gc3RlcC5pbmRleCkpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHByaXZhdGUgc2V0U3Vic2NyaXB0aW9ucygpOiB2b2lkIHtcbiAgICAgICAgZnJvbUV2ZW50PEtleWJvYXJkRXZlbnQ+KHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCBcImtleWRvd25cIilcbiAgICAgICAgICAgIC5waXBlKHRha2VVbnRpbCh0aGlzLmNvbXBvbmVudERlc3Ryb3kkKSlcbiAgICAgICAgICAgIC5zdWJzY3JpYmUoKGV2ZW50OiBLZXlib2FyZEV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmFjdGl2ZVN0ZXApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hY3RpdmVTdGVwID0gdGhpcy5zdGVwTGlzdFswXTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQua2V5ID09PSBcIkFycm93TGVmdFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5hY3RpdmVTdGVwLmluZGV4IC0gMTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0QWN0aXZlU3RlcCh0aGlzLnN0ZXBMaXN0W2luZGV4XSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGV2ZW50LmtleSA9PT0gXCJBcnJvd1JpZ2h0XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLmFjdGl2ZVN0ZXAuaW5kZXggKyAxO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggPCB0aGlzLnN0ZXBMaXN0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRBY3RpdmVTdGVwKHRoaXMuc3RlcExpc3RbaW5kZXhdKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmNkci5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGdyaWRUZW1wbGF0ZUNvbHVtbnMoKTogUGFydGlhbDxDU1NTdHlsZURlY2xhcmF0aW9uPiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBncmlkVGVtcGxhdGVDb2x1bW5zOlxuICAgICAgICAgICAgICAgIHRoaXMub3JpZW50YXRpb24gPT09IFwiaG9yaXpvbnRhbFwiID8gYHJlcGVhdCgke3RoaXMuc3RlcExpc3QubGVuZ3RoICogMn0sIDFmcilgIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgZ3JpZFRlbXBsYXRlUm93czogdGhpcy5vcmllbnRhdGlvbiA9PT0gXCJ2ZXJ0aWNhbFwiID8gYHJlcGVhdCgke3RoaXMuc3RlcExpc3QubGVuZ3RoICogMn0sIDFmcilgIDogdW5kZWZpbmVkXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcHVibGljIGdldCB0cmFja0lubmVyU3R5bGVzKCk6IFBhcnRpYWw8Q1NTU3R5bGVEZWNsYXJhdGlvbj4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgd2lkdGg6IHRoaXMub3JpZW50YXRpb24gPT09IFwiaG9yaXpvbnRhbFwiID8gdGhpcy50cmFja0xlbmd0aCA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGhlaWdodDogdGhpcy5vcmllbnRhdGlvbiA9PT0gXCJ2ZXJ0aWNhbFwiID8gdGhpcy50cmFja0xlbmd0aCA6IHVuZGVmaW5lZFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgdHJhY2tJdGVtU2l6ZSgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5zdGVwTGlzdC5sZW5ndGggIT09IDAgPyAxMDAgLyB0aGlzLnN0ZXBMaXN0Lmxlbmd0aCA6IDA7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCB0cmFja0l0ZW1TdHlsZXMoKTogUGFydGlhbDxDU1NTdHlsZURlY2xhcmF0aW9uPiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBtYXhXaWR0aDogdGhpcy5vcmllbnRhdGlvbiA9PT0gXCJob3Jpem9udGFsXCIgPyBgJHt0aGlzLnRyYWNrSXRlbVNpemV9JWAgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBtYXhIZWlnaHQ6IHRoaXMub3JpZW50YXRpb24gPT09IFwidmVydGljYWxcIiA/IGAke3RoaXMudHJhY2tJdGVtU2l6ZX0lYCA6IHVuZGVmaW5lZFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgdHJhY2tMZW5ndGgoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuICF0aGlzLmFjdGl2ZVN0ZXAgPyBcIjAlXCIgOiBgJHsoMTAwIC8gKHRoaXMuc3RlcExpc3QubGVuZ3RoIC0gMSkpICogdGhpcy5hY3RpdmVTdGVwLmluZGV4fSVgO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgdHJhY2tTdHlsZXMoKTogUGFydGlhbDxDU1NTdHlsZURlY2xhcmF0aW9uPiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBncmlkQ29sdW1uOlxuICAgICAgICAgICAgICAgIHRoaXMub3JpZW50YXRpb24gPT09IFwiaG9yaXpvbnRhbFwiXG4gICAgICAgICAgICAgICAgICAgID8gdGhpcy5hY3RpdmVTdGVwXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGAyLyR7dGhpcy5zdGVwTGlzdC5sZW5ndGggKiAyfWBcbiAgICAgICAgICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgZ3JpZFJvdzpcbiAgICAgICAgICAgICAgICB0aGlzLm9yaWVudGF0aW9uID09PSBcInZlcnRpY2FsXCJcbiAgICAgICAgICAgICAgICAgICAgPyB0aGlzLmFjdGl2ZVN0ZXBcbiAgICAgICAgICAgICAgICAgICAgICAgID8gYDIvJHt0aGlzLnN0ZXBMaXN0Lmxlbmd0aCAqIDJ9YFxuICAgICAgICAgICAgICAgICAgICAgICAgOiB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgOiB1bmRlZmluZWRcbiAgICAgICAgfTtcbiAgICB9XG59XG4iLCI8ZGl2IGNsYXNzPVwibW9uYS1zdGVwcGVyXCIgW25nU3R5bGVdPVwiZ3JpZFRlbXBsYXRlQ29sdW1uc1wiIFtuZ0NsYXNzXT1cInsnbW9uYS1zdGVwcGVyLXZlcnRpY2FsJzogb3JpZW50YXRpb249PT0ndmVydGljYWwnLCAnbW9uYS1zdGVwcGVyLWxpbmVhcic6IGxpbmVhcn1cIiBbYXR0ci50YWJpbmRleF09XCIxXCI+XG4gICAgPG9sIGNsYXNzPVwibW9uYS1zdGVwcGVyLXN0ZXAtbGlzdFwiIFtuZ0NsYXNzXT1cInsnbW9uYS1zdGVwcGVyLXN0ZXAtbGlzdC1ob3Jpem9udGFsJzogb3JpZW50YXRpb249PT0naG9yaXpvbnRhbCcsICdtb25hLXN0ZXBwZXItc3RlcC1saXN0LXZlcnRpY2FsJzogb3JpZW50YXRpb249PT0ndmVydGljYWwnfVwiPlxuICAgICAgICA8bGkgKm5nRm9yPVwibGV0IHN0ZXAgb2Ygc3RlcExpc3RcIlxuICAgICAgICAgICAgW25nU3R5bGVdPVwidHJhY2tJdGVtU3R5bGVzXCJcbiAgICAgICAgICAgIChjbGljayk9XCJvblN0ZXBDbGljayhzdGVwKVwiPlxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICA8bmctY29udGFpbmVyICpuZ0lmPVwiIXN0ZXBUZW1wbGF0ZURpcmVjdGl2ZVwiPlxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBbbmdDbGFzc109XCJ7J21vbmEtc3RlcHBlci1zdGVwLWFjdGl2ZSc6IHN0ZXAuYWN0aXZlfVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cIiFpbmRpY2F0b3JUZW1wbGF0ZURpcmVjdGl2ZVwiPnt7c3RlcC5pbmRleH19PC9uZy1jb250YWluZXI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8bmctY29udGFpbmVyICpuZ0lmPVwiaW5kaWNhdG9yVGVtcGxhdGVEaXJlY3RpdmVcIiBbbmdUZW1wbGF0ZU91dGxldF09XCJpbmRpY2F0b3JUZW1wbGF0ZURpcmVjdGl2ZS50ZW1wbGF0ZVJlZlwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtuZ1RlbXBsYXRlT3V0bGV0Q29udGV4dF09XCJ7JGltcGxpY2l0OiBzdGVwLm9wdGlvbnMsIGluZGV4OiBzdGVwLmluZGV4LCBhY3RpdmU6IHN0ZXAuYWN0aXZlfVwiPjwvbmctY29udGFpbmVyPlxuICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgICAgICAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cInN0ZXBUZW1wbGF0ZURpcmVjdGl2ZVwiPlxuICAgICAgICAgICAgICAgICAgICA8bmctY29udGFpbmVyIFtuZ1RlbXBsYXRlT3V0bGV0XT1cInN0ZXBUZW1wbGF0ZURpcmVjdGl2ZS50ZW1wbGF0ZVJlZlwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW25nVGVtcGxhdGVPdXRsZXRDb250ZXh0XT1cInskaW1wbGljaXQ6IHN0ZXAub3B0aW9ucywgaW5kZXg6IHN0ZXAuaW5kZXgsIGFjdGl2ZTogc3RlcC5hY3RpdmV9XCI+PC9uZy1jb250YWluZXI+XG4gICAgICAgICAgICAgICAgPC9uZy1jb250YWluZXI+XG5cbiAgICAgICAgICAgICAgICA8c3BhbiAqbmdJZj1cIiFsYWJlbFRlbXBsYXRlRGlyZWN0aXZlXCI+e3tzdGVwLm9wdGlvbnMubGFiZWx9fTwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8bmctY29udGFpbmVyICpuZ0lmPVwibGFiZWxUZW1wbGF0ZURpcmVjdGl2ZVwiIFtuZ1RlbXBsYXRlT3V0bGV0XT1cImxhYmVsVGVtcGxhdGVEaXJlY3RpdmU/LnRlbXBsYXRlUmVmID8/IG51bGxcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW25nVGVtcGxhdGVPdXRsZXRDb250ZXh0XT1cInskaW1wbGljaXQ6IHN0ZXAub3B0aW9ucywgaW5kZXg6IHN0ZXAuaW5kZXgsIGFjdGl2ZTogc3RlcC5hY3RpdmV9XCI+PC9uZy1jb250YWluZXI+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9saT5cbiAgICA8L29sPlxuICAgIDxkaXYgY2xhc3M9XCJtb25hLXN0ZXBwZXItdHJhY2tcIiBbbmdTdHlsZV09XCJ0cmFja1N0eWxlc1wiIFtuZ0NsYXNzXT1cInsnbW9uYS1zdGVwcGVyLXRyYWNrLWhvcml6b250YWwnOiBvcmllbnRhdGlvbj09PSdob3Jpem9udGFsJywgJ21vbmEtc3RlcHBlci10cmFjay12ZXJ0aWNhbCc6IG9yaWVudGF0aW9uPT09J3ZlcnRpY2FsJ31cIj5cbiAgICAgICAgPGRpdiBbbmdTdHlsZV09XCJ0cmFja0lubmVyU3R5bGVzXCI+PC9kaXY+XG4gICAgPC9kaXY+XG48L2Rpdj5cbiJdfQ==