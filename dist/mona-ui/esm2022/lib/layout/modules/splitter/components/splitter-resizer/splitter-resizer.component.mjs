import { Component, Input, QueryList } from "@angular/core";
import { faCaretDown, faCaretLeft, faCaretRight, faCaretUp, faEllipsisH, faEllipsisV } from "@fortawesome/free-solid-svg-icons";
import { fromEvent } from "rxjs";
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@fortawesome/angular-fontawesome";
export class SplitterResizerComponent {
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.horizontalCollapseNextIcon = faCaretRight;
        this.horizontalCollapsePreviousIcon = faCaretLeft;
        this.horizontalResizeIcon = faEllipsisV;
        this.verticalCollapseNextIcon = faCaretDown;
        this.verticalCollapsePreviousIcon = faCaretUp;
        this.verticalResizeIcon = faEllipsisH;
        this.resizing = false;
        this.nextResizer = null;
        this.orientation = "horizontal";
        this.panes = new QueryList();
        this.previousResizer = null;
    }
    ngOnChanges(changes) {
        if (changes && (changes["panes"] || changes["pane"])) {
            const index = this.panes.toArray().indexOf(this.previousPane);
            if (index !== -1) {
                this.nextPane = this.panes.toArray()[index + 1];
            }
        }
    }
    ngOnInit() {
        this.setSubscriptions();
    }
    toggle(position) {
        if (this.previousPane.collapsed && this.nextPane?.collapsed) {
            return;
        }
        if (position === "previous") {
            if (!this.previousPane.collapsed) {
                if (!this.nextPane.collapsed) {
                    this.previousPane.setCollapsed(true);
                    if (!this.previousPane.isStatic && this.nextPane.isStatic) {
                        this.nextPane.isStatic = false;
                    }
                }
                else {
                    this.nextPane.setCollapsed(false);
                    if (this.previousPane.uid === this.panes.first.uid && this.previousPane.paneSize != null) {
                        this.previousPane.isStatic = true;
                    }
                }
            }
            else if (this.nextPane.collapsed) {
                this.nextPane.setCollapsed(false);
            }
        }
        else {
            if (!this.nextPane?.collapsed) {
                if (!this.previousPane.collapsed) {
                    this.nextPane.setCollapsed(true);
                    if (!this.nextPane.isStatic && this.previousPane.isStatic) {
                        this.previousPane.isStatic = false;
                    }
                }
                else {
                    this.previousPane.setCollapsed(false);
                    if (this.nextPane.uid === this.panes.last.uid && this.nextPane.paneSize != null) {
                        this.nextPane.isStatic = true;
                    }
                }
            }
            else if (this.previousPane.collapsed) {
                this.previousPane.setCollapsed(false);
            }
        }
    }
    getPaneElements() {
        return [
            document.querySelector(`[data-pid='${this.previousPane.uid}']`),
            document.querySelector(`[data-pid='${this.nextPane?.uid}']`)
        ];
    }
    resize(event) {
        const [previousPaneElement, nextPaneElement] = this.getPaneElements();
        const rect = previousPaneElement.getBoundingClientRect();
        if (this.orientation === "horizontal") {
            const totalSize = rect.width + nextPaneElement.getBoundingClientRect().width;
            const size = event.clientX - rect.left < 0
                ? 0
                : event.clientX - rect.left > totalSize
                    ? totalSize
                    : event.clientX - rect.left;
            this.previousPane.setSize(`${size}px`);
            this.nextPane.setSize(`${totalSize - size}px`);
        }
        else {
            const totalSize = rect.height + nextPaneElement.getBoundingClientRect().height;
            const size = event.clientY - rect.top < 0
                ? 0
                : event.clientY - rect.top > totalSize
                    ? totalSize
                    : event.clientY - rect.top;
            this.previousPane.setSize(`${size}px`);
            this.nextPane.setSize(`${totalSize - size}px`);
        }
    }
    setSubscriptions() {
        fromEvent(this.elementRef.nativeElement, "mousedown").subscribe(event => {
            this.resizing = true;
            const mouseMoveSubscription = fromEvent(document, "mousemove").subscribe(event => {
                if (!this.previousPane.resizable || !this.nextPane.resizable) {
                    return;
                }
                if (!this.previousPane.collapsed && !this.nextPane.collapsed) {
                    this.resize(event);
                }
            });
            const mouseUpSubscription = fromEvent(document, "mouseup").subscribe(event => {
                mouseMoveSubscription.unsubscribe();
                mouseUpSubscription.unsubscribe();
                this.resizing = false;
            });
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: SplitterResizerComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.0.0", type: SplitterResizerComponent, selector: "mona-splitter-resizer", inputs: { nextResizer: "nextResizer", orientation: "orientation", previousPane: "previousPane", panes: "panes", previousResizer: "previousResizer" }, usesOnChanges: true, ngImport: i0, template: "<div class=\"mona-splitter-resizer\" [ngClass]=\"orientation\">\n    <div class=\"mona-splitter-collapse\" [attr.data-pos]=\"'prev'\" (click)=\"toggle('previous')\" *ngIf=\"(previousPane.collapsible || nextPane.collapsed) && (previousPane.resizable && nextPane.resizable)\">\n        <fa-icon [icon]=\"horizontalCollapsePreviousIcon\" *ngIf=\"orientation==='horizontal' && !previousPane.collapsed\"></fa-icon>\n        <fa-icon [icon]=\"verticalCollapsePreviousIcon\" *ngIf=\"orientation==='vertical' && !previousPane.collapsed\"></fa-icon>\n    </div>\n    <ng-container *ngIf=\"previousPane.resizable && nextPane.resizable\">\n        <fa-icon [icon]=\"horizontalResizeIcon\" *ngIf=\"orientation==='horizontal' && !(previousPane.collapsed || nextPane.collapsed)\"></fa-icon>\n        <fa-icon [icon]=\"verticalResizeIcon\" *ngIf=\"orientation==='vertical' && !(previousPane.collapsed || nextPane.collapsed)\"></fa-icon>\n    </ng-container>\n    <div class=\"mona-splitter-collapse\" [attr.data-pos]=\"'next'\" (click)=\"toggle('next')\" *ngIf=\"(nextPane.collapsible || previousPane.collapsed) && (previousPane.resizable && nextPane.resizable)\">\n        <fa-icon [icon]=\"horizontalCollapseNextIcon\" *ngIf=\"orientation==='horizontal' && !nextPane?.collapsed\"></fa-icon>\n        <fa-icon [icon]=\"verticalCollapseNextIcon\" *ngIf=\"orientation==='vertical' && !nextPane?.collapsed\"></fa-icon>\n    </div>\n</div>\n", styles: ["div.mona-splitter-resizer{position:relative;z-index:1;display:flex;align-items:center;justify-content:center;color:var(--mona-text)}div.mona-splitter-resizer fa-icon{opacity:.6}div.mona-splitter-resizer>fa-icon{margin:5px}div.mona-splitter-resizer.vertical{width:100%;height:5px;cursor:row-resize;border-top:1px solid var(--mona-border-color);border-bottom:1px solid var(--mona-border-color);background:var(--mona-background)}div.mona-splitter-resizer.vertical div.mona-splitter-collapse[data-pos=prev]{margin-top:1px}div.mona-splitter-resizer.vertical div.mona-splitter-collapse[data-pos=next]{margin-bottom:1px}div.mona-splitter-resizer.horizontal{width:5px;height:100%;cursor:col-resize;border-left:1px solid var(--mona-border-color);border-right:1px solid var(--mona-border-color);background:var(--mona-background);flex-direction:column}div.mona-splitter-resizer.horizontal div.mona-splitter-collapse[data-pos=prev]{margin-left:1px}div.mona-splitter-resizer.horizontal div.mona-splitter-collapse[data-pos=next]{margin-right:1px}div.mona-splitter-collapse{cursor:pointer;display:flex;align-items:center;justify-content:center}div.mona-splitter-collapse fa-icon{font-size:8px}\n"], dependencies: [{ kind: "directive", type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i2.FaIconComponent, selector: "fa-icon", inputs: ["icon", "title", "spin", "pulse", "mask", "styles", "flip", "size", "pull", "border", "inverse", "symbol", "rotate", "fixedWidth", "classes", "transform", "a11yRole"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: SplitterResizerComponent, decorators: [{
            type: Component,
            args: [{ selector: "mona-splitter-resizer", template: "<div class=\"mona-splitter-resizer\" [ngClass]=\"orientation\">\n    <div class=\"mona-splitter-collapse\" [attr.data-pos]=\"'prev'\" (click)=\"toggle('previous')\" *ngIf=\"(previousPane.collapsible || nextPane.collapsed) && (previousPane.resizable && nextPane.resizable)\">\n        <fa-icon [icon]=\"horizontalCollapsePreviousIcon\" *ngIf=\"orientation==='horizontal' && !previousPane.collapsed\"></fa-icon>\n        <fa-icon [icon]=\"verticalCollapsePreviousIcon\" *ngIf=\"orientation==='vertical' && !previousPane.collapsed\"></fa-icon>\n    </div>\n    <ng-container *ngIf=\"previousPane.resizable && nextPane.resizable\">\n        <fa-icon [icon]=\"horizontalResizeIcon\" *ngIf=\"orientation==='horizontal' && !(previousPane.collapsed || nextPane.collapsed)\"></fa-icon>\n        <fa-icon [icon]=\"verticalResizeIcon\" *ngIf=\"orientation==='vertical' && !(previousPane.collapsed || nextPane.collapsed)\"></fa-icon>\n    </ng-container>\n    <div class=\"mona-splitter-collapse\" [attr.data-pos]=\"'next'\" (click)=\"toggle('next')\" *ngIf=\"(nextPane.collapsible || previousPane.collapsed) && (previousPane.resizable && nextPane.resizable)\">\n        <fa-icon [icon]=\"horizontalCollapseNextIcon\" *ngIf=\"orientation==='horizontal' && !nextPane?.collapsed\"></fa-icon>\n        <fa-icon [icon]=\"verticalCollapseNextIcon\" *ngIf=\"orientation==='vertical' && !nextPane?.collapsed\"></fa-icon>\n    </div>\n</div>\n", styles: ["div.mona-splitter-resizer{position:relative;z-index:1;display:flex;align-items:center;justify-content:center;color:var(--mona-text)}div.mona-splitter-resizer fa-icon{opacity:.6}div.mona-splitter-resizer>fa-icon{margin:5px}div.mona-splitter-resizer.vertical{width:100%;height:5px;cursor:row-resize;border-top:1px solid var(--mona-border-color);border-bottom:1px solid var(--mona-border-color);background:var(--mona-background)}div.mona-splitter-resizer.vertical div.mona-splitter-collapse[data-pos=prev]{margin-top:1px}div.mona-splitter-resizer.vertical div.mona-splitter-collapse[data-pos=next]{margin-bottom:1px}div.mona-splitter-resizer.horizontal{width:5px;height:100%;cursor:col-resize;border-left:1px solid var(--mona-border-color);border-right:1px solid var(--mona-border-color);background:var(--mona-background);flex-direction:column}div.mona-splitter-resizer.horizontal div.mona-splitter-collapse[data-pos=prev]{margin-left:1px}div.mona-splitter-resizer.horizontal div.mona-splitter-collapse[data-pos=next]{margin-right:1px}div.mona-splitter-collapse{cursor:pointer;display:flex;align-items:center;justify-content:center}div.mona-splitter-collapse fa-icon{font-size:8px}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { nextResizer: [{
                type: Input
            }], orientation: [{
                type: Input
            }], previousPane: [{
                type: Input
            }], panes: [{
                type: Input
            }], previousResizer: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,