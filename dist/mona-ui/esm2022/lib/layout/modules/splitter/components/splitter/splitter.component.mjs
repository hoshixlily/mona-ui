import { Component, ContentChildren, Input, QueryList, ViewChildren } from "@angular/core";
import { SplitterPaneComponent } from "../splitter-pane/splitter-pane.component";
import { SplitterResizerComponent } from "../splitter-resizer/splitter-resizer.component";
import { IndexableList } from "@mirei/ts-collections";
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "../splitter-resizer/splitter-resizer.component";
export class SplitterComponent {
    constructor(cdr) {
        this.cdr = cdr;
        this.resizers = new IndexableList();
        this.orientation = "horizontal";
        this.paneList = new QueryList();
        this.resizerList = new QueryList();
    }
    ngAfterContentInit() {
        const staticPanes = this.paneList.filter(p => p.isStatic);
        if (staticPanes.length === 0) {
            const percentage = 100 / this.paneList.length;
            this.paneList.forEach(p => {
                p.setSize(`${percentage}%`);
                // p.isStatic = false;
            });
            return;
        }
        if (staticPanes.length === this.paneList.length) {
            this.paneList.last.setSize(undefined);
            this.paneList.last.isStatic = false;
        }
        this.cdr.detectChanges();
    }
    ngAfterViewInit() {
        this.resizers = new IndexableList(this.resizerList);
        this.resizerList.changes.subscribe(() => {
            this.resizers = new IndexableList(this.resizerList);
        });
        this.cdr.detectChanges();
    }
    ngOnInit() { }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: SplitterComponent, deps: [{ token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.0.0", type: SplitterComponent, selector: "mona-splitter", inputs: { orientation: "orientation" }, queries: [{ propertyName: "paneList", predicate: SplitterPaneComponent }], viewQueries: [{ propertyName: "resizerList", predicate: SplitterResizerComponent, descendants: true }], ngImport: i0, template: "<div class=\"mona-splitter\" [ngClass]=\"{'mona-splitter-vertical': orientation==='vertical'}\">\n    <ng-container *ngFor=\"let pane of paneList; let px = index;\">\n        <div class=\"mona-splitter-pane\" [attr.data-px]=\"px\" [attr.data-pid]=\"pane.uid\"\n             [ngStyle]=\"{'order': px*2, 'flex-basis': pane.paneSize}\" [ngClass]=\"{'mona-splitter-static': pane.isStatic, 'mona-splitter-hidden': pane.collapsed}\">\n            <ng-container [ngTemplateOutlet]=\"pane.templateRef\" *ngIf=\"pane.templateRef\"></ng-container>\n        </div>\n        <mona-splitter-resizer [orientation]=\"orientation\" [previousResizer]=\"px===0?null:resizers[px]\"\n                               [nextResizer]=\"px===resizers.length-1?null:resizers[px+1]\"\n                               [previousPane]=\"pane\" [panes]=\"paneList\" [ngStyle]=\"{'order': px*2+1}\"\n                               *ngIf=\"px !== paneList.length-1;\"></mona-splitter-resizer>\n    </ng-container>\n</div>\n", styles: [":host{width:100%;height:100%}div.mona-splitter{width:100%;height:100%;display:flex;position:relative;flex-direction:row;overflow:hidden}div.mona-splitter.mona-splitter-vertical{flex-direction:column}div.mona-splitter-pane{flex:1 1 auto;overflow:hidden}div.mona-splitter-pane.mona-splitter-static{flex-grow:0;flex-shrink:0}div.mona-splitter-pane.mona-splitter-hidden{flex:0 1 0%!important;overflow:hidden!important}\n"], dependencies: [{ kind: "directive", type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: i1.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { kind: "component", type: i2.SplitterResizerComponent, selector: "mona-splitter-resizer", inputs: ["nextResizer", "orientation", "previousPane", "panes", "previousResizer"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: SplitterComponent, decorators: [{
            type: Component,
            args: [{ selector: "mona-splitter", template: "<div class=\"mona-splitter\" [ngClass]=\"{'mona-splitter-vertical': orientation==='vertical'}\">\n    <ng-container *ngFor=\"let pane of paneList; let px = index;\">\n        <div class=\"mona-splitter-pane\" [attr.data-px]=\"px\" [attr.data-pid]=\"pane.uid\"\n             [ngStyle]=\"{'order': px*2, 'flex-basis': pane.paneSize}\" [ngClass]=\"{'mona-splitter-static': pane.isStatic, 'mona-splitter-hidden': pane.collapsed}\">\n            <ng-container [ngTemplateOutlet]=\"pane.templateRef\" *ngIf=\"pane.templateRef\"></ng-container>\n        </div>\n        <mona-splitter-resizer [orientation]=\"orientation\" [previousResizer]=\"px===0?null:resizers[px]\"\n                               [nextResizer]=\"px===resizers.length-1?null:resizers[px+1]\"\n                               [previousPane]=\"pane\" [panes]=\"paneList\" [ngStyle]=\"{'order': px*2+1}\"\n                               *ngIf=\"px !== paneList.length-1;\"></mona-splitter-resizer>\n    </ng-container>\n</div>\n", styles: [":host{width:100%;height:100%}div.mona-splitter{width:100%;height:100%;display:flex;position:relative;flex-direction:row;overflow:hidden}div.mona-splitter.mona-splitter-vertical{flex-direction:column}div.mona-splitter-pane{flex:1 1 auto;overflow:hidden}div.mona-splitter-pane.mona-splitter-static{flex-grow:0;flex-shrink:0}div.mona-splitter-pane.mona-splitter-hidden{flex:0 1 0%!important;overflow:hidden!important}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }]; }, propDecorators: { orientation: [{
                type: Input
            }], paneList: [{
                type: ContentChildren,
                args: [SplitterPaneComponent]
            }], resizerList: [{
                type: ViewChildren,
                args: [SplitterResizerComponent]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BsaXR0ZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbW9uYS11aS9zcmMvbGliL2xheW91dC9tb2R1bGVzL3NwbGl0dGVyL2NvbXBvbmVudHMvc3BsaXR0ZXIvc3BsaXR0ZXIuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbW9uYS11aS9zcmMvbGliL2xheW91dC9tb2R1bGVzL3NwbGl0dGVyL2NvbXBvbmVudHMvc3BsaXR0ZXIvc3BsaXR0ZXIuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUlILFNBQVMsRUFDVCxlQUFlLEVBQ2YsS0FBSyxFQUVMLFNBQVMsRUFDVCxZQUFZLEVBQ2YsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sMENBQTBDLENBQUM7QUFFakYsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sZ0RBQWdELENBQUM7QUFDMUYsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHVCQUF1QixDQUFDOzs7O0FBT3RELE1BQU0sT0FBTyxpQkFBaUI7SUFZMUIsWUFBb0MsR0FBc0I7UUFBdEIsUUFBRyxHQUFILEdBQUcsQ0FBbUI7UUFYbkQsYUFBUSxHQUE0QyxJQUFJLGFBQWEsRUFBNEIsQ0FBQztRQUdsRyxnQkFBVyxHQUFnQixZQUFZLENBQUM7UUFHeEMsYUFBUSxHQUFxQyxJQUFJLFNBQVMsRUFBeUIsQ0FBQztRQUdwRixnQkFBVyxHQUF3QyxJQUFJLFNBQVMsRUFBNEIsQ0FBQztJQUV2QyxDQUFDO0lBRXZELGtCQUFrQjtRQUNyQixNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUMxRCxJQUFJLFdBQVcsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQzFCLE1BQU0sVUFBVSxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQztZQUM5QyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRTtnQkFDdEIsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLFVBQVUsR0FBRyxDQUFDLENBQUM7Z0JBQzVCLHNCQUFzQjtZQUMxQixDQUFDLENBQUMsQ0FBQztZQUNILE9BQU87U0FDVjtRQUNELElBQUksV0FBVyxDQUFDLE1BQU0sS0FBSyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRTtZQUM3QyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDdEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztTQUN2QztRQUNELElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDN0IsQ0FBQztJQUVNLGVBQWU7UUFDbEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLGFBQWEsQ0FBMkIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQzlFLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUU7WUFDcEMsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLGFBQWEsQ0FBMkIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ2xGLENBQUMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUM3QixDQUFDO0lBRU0sUUFBUSxLQUFVLENBQUM7OEdBdkNqQixpQkFBaUI7a0dBQWpCLGlCQUFpQixzSEFNVCxxQkFBcUIsNkRBR3hCLHdCQUF3QixnREM5QjFDLDg5QkFZQTs7MkZEU2EsaUJBQWlCO2tCQUw3QixTQUFTOytCQUNJLGVBQWU7d0dBUWxCLFdBQVc7c0JBRGpCLEtBQUs7Z0JBSUMsUUFBUTtzQkFEZCxlQUFlO3VCQUFDLHFCQUFxQjtnQkFJL0IsV0FBVztzQkFEakIsWUFBWTt1QkFBQyx3QkFBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIEFmdGVyQ29udGVudEluaXQsXG4gICAgQWZ0ZXJWaWV3SW5pdCxcbiAgICBDaGFuZ2VEZXRlY3RvclJlZixcbiAgICBDb21wb25lbnQsXG4gICAgQ29udGVudENoaWxkcmVuLFxuICAgIElucHV0LFxuICAgIE9uSW5pdCxcbiAgICBRdWVyeUxpc3QsXG4gICAgVmlld0NoaWxkcmVuXG59IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBTcGxpdHRlclBhbmVDb21wb25lbnQgfSBmcm9tIFwiLi4vc3BsaXR0ZXItcGFuZS9zcGxpdHRlci1wYW5lLmNvbXBvbmVudFwiO1xuaW1wb3J0IHsgT3JpZW50YXRpb24gfSBmcm9tIFwiLi4vLi4vZGF0YS9PcmllbnRhdGlvblwiO1xuaW1wb3J0IHsgU3BsaXR0ZXJSZXNpemVyQ29tcG9uZW50IH0gZnJvbSBcIi4uL3NwbGl0dGVyLXJlc2l6ZXIvc3BsaXR0ZXItcmVzaXplci5jb21wb25lbnRcIjtcbmltcG9ydCB7IEluZGV4YWJsZUxpc3QgfSBmcm9tIFwiQG1pcmVpL3RzLWNvbGxlY3Rpb25zXCI7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiBcIm1vbmEtc3BsaXR0ZXJcIixcbiAgICB0ZW1wbGF0ZVVybDogXCIuL3NwbGl0dGVyLmNvbXBvbmVudC5odG1sXCIsXG4gICAgc3R5bGVVcmxzOiBbXCIuL3NwbGl0dGVyLmNvbXBvbmVudC5zY3NzXCJdXG59KVxuZXhwb3J0IGNsYXNzIFNwbGl0dGVyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBBZnRlclZpZXdJbml0LCBBZnRlckNvbnRlbnRJbml0IHtcbiAgICBwdWJsaWMgcmVzaXplcnM6IEluZGV4YWJsZUxpc3Q8U3BsaXR0ZXJSZXNpemVyQ29tcG9uZW50PiA9IG5ldyBJbmRleGFibGVMaXN0PFNwbGl0dGVyUmVzaXplckNvbXBvbmVudD4oKTtcblxuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIG9yaWVudGF0aW9uOiBPcmllbnRhdGlvbiA9IFwiaG9yaXpvbnRhbFwiO1xuXG4gICAgQENvbnRlbnRDaGlsZHJlbihTcGxpdHRlclBhbmVDb21wb25lbnQpXG4gICAgcHVibGljIHBhbmVMaXN0OiBRdWVyeUxpc3Q8U3BsaXR0ZXJQYW5lQ29tcG9uZW50PiA9IG5ldyBRdWVyeUxpc3Q8U3BsaXR0ZXJQYW5lQ29tcG9uZW50PigpO1xuXG4gICAgQFZpZXdDaGlsZHJlbihTcGxpdHRlclJlc2l6ZXJDb21wb25lbnQpXG4gICAgcHVibGljIHJlc2l6ZXJMaXN0OiBRdWVyeUxpc3Q8U3BsaXR0ZXJSZXNpemVyQ29tcG9uZW50PiA9IG5ldyBRdWVyeUxpc3Q8U3BsaXR0ZXJSZXNpemVyQ29tcG9uZW50PigpO1xuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZikge31cblxuICAgIHB1YmxpYyBuZ0FmdGVyQ29udGVudEluaXQoKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHN0YXRpY1BhbmVzID0gdGhpcy5wYW5lTGlzdC5maWx0ZXIocCA9PiBwLmlzU3RhdGljKTtcbiAgICAgICAgaWYgKHN0YXRpY1BhbmVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgY29uc3QgcGVyY2VudGFnZSA9IDEwMCAvIHRoaXMucGFuZUxpc3QubGVuZ3RoO1xuICAgICAgICAgICAgdGhpcy5wYW5lTGlzdC5mb3JFYWNoKHAgPT4ge1xuICAgICAgICAgICAgICAgIHAuc2V0U2l6ZShgJHtwZXJjZW50YWdlfSVgKTtcbiAgICAgICAgICAgICAgICAvLyBwLmlzU3RhdGljID0gZmFsc2U7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhdGljUGFuZXMubGVuZ3RoID09PSB0aGlzLnBhbmVMaXN0Lmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5wYW5lTGlzdC5sYXN0LnNldFNpemUodW5kZWZpbmVkKTtcbiAgICAgICAgICAgIHRoaXMucGFuZUxpc3QubGFzdC5pc1N0YXRpYyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2RyLmRldGVjdENoYW5nZXMoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xuICAgICAgICB0aGlzLnJlc2l6ZXJzID0gbmV3IEluZGV4YWJsZUxpc3Q8U3BsaXR0ZXJSZXNpemVyQ29tcG9uZW50Pih0aGlzLnJlc2l6ZXJMaXN0KTtcbiAgICAgICAgdGhpcy5yZXNpemVyTGlzdC5jaGFuZ2VzLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnJlc2l6ZXJzID0gbmV3IEluZGV4YWJsZUxpc3Q8U3BsaXR0ZXJSZXNpemVyQ29tcG9uZW50Pih0aGlzLnJlc2l6ZXJMaXN0KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuY2RyLmRldGVjdENoYW5nZXMoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgbmdPbkluaXQoKTogdm9pZCB7fVxufVxuIiwiPGRpdiBjbGFzcz1cIm1vbmEtc3BsaXR0ZXJcIiBbbmdDbGFzc109XCJ7J21vbmEtc3BsaXR0ZXItdmVydGljYWwnOiBvcmllbnRhdGlvbj09PSd2ZXJ0aWNhbCd9XCI+XG4gICAgPG5nLWNvbnRhaW5lciAqbmdGb3I9XCJsZXQgcGFuZSBvZiBwYW5lTGlzdDsgbGV0IHB4ID0gaW5kZXg7XCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJtb25hLXNwbGl0dGVyLXBhbmVcIiBbYXR0ci5kYXRhLXB4XT1cInB4XCIgW2F0dHIuZGF0YS1waWRdPVwicGFuZS51aWRcIlxuICAgICAgICAgICAgIFtuZ1N0eWxlXT1cInsnb3JkZXInOiBweCoyLCAnZmxleC1iYXNpcyc6IHBhbmUucGFuZVNpemV9XCIgW25nQ2xhc3NdPVwieydtb25hLXNwbGl0dGVyLXN0YXRpYyc6IHBhbmUuaXNTdGF0aWMsICdtb25hLXNwbGl0dGVyLWhpZGRlbic6IHBhbmUuY29sbGFwc2VkfVwiPlxuICAgICAgICAgICAgPG5nLWNvbnRhaW5lciBbbmdUZW1wbGF0ZU91dGxldF09XCJwYW5lLnRlbXBsYXRlUmVmXCIgKm5nSWY9XCJwYW5lLnRlbXBsYXRlUmVmXCI+PC9uZy1jb250YWluZXI+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8bW9uYS1zcGxpdHRlci1yZXNpemVyIFtvcmllbnRhdGlvbl09XCJvcmllbnRhdGlvblwiIFtwcmV2aW91c1Jlc2l6ZXJdPVwicHg9PT0wP251bGw6cmVzaXplcnNbcHhdXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbbmV4dFJlc2l6ZXJdPVwicHg9PT1yZXNpemVycy5sZW5ndGgtMT9udWxsOnJlc2l6ZXJzW3B4KzFdXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbcHJldmlvdXNQYW5lXT1cInBhbmVcIiBbcGFuZXNdPVwicGFuZUxpc3RcIiBbbmdTdHlsZV09XCJ7J29yZGVyJzogcHgqMisxfVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKm5nSWY9XCJweCAhPT0gcGFuZUxpc3QubGVuZ3RoLTE7XCI+PC9tb25hLXNwbGl0dGVyLXJlc2l6ZXI+XG4gICAgPC9uZy1jb250YWluZXI+XG48L2Rpdj5cbiJdfQ==