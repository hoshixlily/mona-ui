import { Pipe } from "@angular/core";
import * as i0 from "@angular/core";
export class DateComparerPipe {
    transform(value, other, operator) {
        if (value === null || other === null) {
            return false;
        }
        switch (operator) {
            case "==":
                return (value.getDate() === other.getDate() &&
                    value.getMonth() === other.getMonth() &&
                    value.getFullYear() === other.getFullYear());
            case "!=":
                return (value.getDate() !== other.getDate() ||
                    value.getMonth() !== other.getMonth() ||
                    value.getFullYear() !== other.getFullYear());
            case "<":
                return (value.getFullYear() < other.getFullYear() ||
                    (value.getFullYear() === other.getFullYear() && value.getMonth() < other.getMonth()) ||
                    (value.getFullYear() === other.getFullYear() &&
                        value.getMonth() === other.getMonth() &&
                        value.getDate() < other.getDate()));
            case "<=":
                return (value.getFullYear() < other.getFullYear() ||
                    (value.getFullYear() === other.getFullYear() && value.getMonth() < other.getMonth()) ||
                    (value.getFullYear() === other.getFullYear() &&
                        value.getMonth() === other.getMonth() &&
                        value.getDate() <= other.getDate()));
            case ">":
                return (value.getFullYear() > other.getFullYear() ||
                    (value.getFullYear() === other.getFullYear() && value.getMonth() > other.getMonth()) ||
                    (value.getFullYear() === other.getFullYear() &&
                        value.getMonth() === other.getMonth() &&
                        value.getDate() > other.getDate()));
            case ">=":
                return (value.getFullYear() > other.getFullYear() ||
                    (value.getFullYear() === other.getFullYear() && value.getMonth() > other.getMonth()) ||
                    (value.getFullYear() === other.getFullYear() &&
                        value.getMonth() === other.getMonth() &&
                        value.getDate() >= other.getDate()));
            default:
                return false;
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: DateComparerPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe }); }
    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "16.0.0", ngImport: i0, type: DateComparerPipe, isStandalone: true, name: "monaDateComparer" }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: DateComparerPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: "monaDateComparer",
                    standalone: true
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS1jb21wYXJlci5waXBlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbW9uYS11aS9zcmMvbGliL3BpcGVzL2RhdGUtY29tcGFyZXIucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFpQixNQUFNLGVBQWUsQ0FBQzs7QUFRcEQsTUFBTSxPQUFPLGdCQUFnQjtJQUNsQixTQUFTLENBQUMsS0FBa0IsRUFBRSxLQUFrQixFQUFFLFFBQWdDO1FBQ3JGLElBQUksS0FBSyxLQUFLLElBQUksSUFBSSxLQUFLLEtBQUssSUFBSSxFQUFFO1lBQ2xDLE9BQU8sS0FBSyxDQUFDO1NBQ2hCO1FBQ0QsUUFBUSxRQUFRLEVBQUU7WUFDZCxLQUFLLElBQUk7Z0JBQ0wsT0FBTyxDQUNILEtBQUssQ0FBQyxPQUFPLEVBQUUsS0FBSyxLQUFLLENBQUMsT0FBTyxFQUFFO29CQUNuQyxLQUFLLENBQUMsUUFBUSxFQUFFLEtBQUssS0FBSyxDQUFDLFFBQVEsRUFBRTtvQkFDckMsS0FBSyxDQUFDLFdBQVcsRUFBRSxLQUFLLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FDOUMsQ0FBQztZQUNOLEtBQUssSUFBSTtnQkFDTCxPQUFPLENBQ0gsS0FBSyxDQUFDLE9BQU8sRUFBRSxLQUFLLEtBQUssQ0FBQyxPQUFPLEVBQUU7b0JBQ25DLEtBQUssQ0FBQyxRQUFRLEVBQUUsS0FBSyxLQUFLLENBQUMsUUFBUSxFQUFFO29CQUNyQyxLQUFLLENBQUMsV0FBVyxFQUFFLEtBQUssS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUM5QyxDQUFDO1lBQ04sS0FBSyxHQUFHO2dCQUNKLE9BQU8sQ0FDSCxLQUFLLENBQUMsV0FBVyxFQUFFLEdBQUcsS0FBSyxDQUFDLFdBQVcsRUFBRTtvQkFDekMsQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLEtBQUssS0FBSyxDQUFDLFdBQVcsRUFBRSxJQUFJLEtBQUssQ0FBQyxRQUFRLEVBQUUsR0FBRyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7b0JBQ3BGLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxLQUFLLEtBQUssQ0FBQyxXQUFXLEVBQUU7d0JBQ3hDLEtBQUssQ0FBQyxRQUFRLEVBQUUsS0FBSyxLQUFLLENBQUMsUUFBUSxFQUFFO3dCQUNyQyxLQUFLLENBQUMsT0FBTyxFQUFFLEdBQUcsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQ3pDLENBQUM7WUFDTixLQUFLLElBQUk7Z0JBQ0wsT0FBTyxDQUNILEtBQUssQ0FBQyxXQUFXLEVBQUUsR0FBRyxLQUFLLENBQUMsV0FBVyxFQUFFO29CQUN6QyxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsS0FBSyxLQUFLLENBQUMsV0FBVyxFQUFFLElBQUksS0FBSyxDQUFDLFFBQVEsRUFBRSxHQUFHLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztvQkFDcEYsQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLEtBQUssS0FBSyxDQUFDLFdBQVcsRUFBRTt3QkFDeEMsS0FBSyxDQUFDLFFBQVEsRUFBRSxLQUFLLEtBQUssQ0FBQyxRQUFRLEVBQUU7d0JBQ3JDLEtBQUssQ0FBQyxPQUFPLEVBQUUsSUFBSSxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FDMUMsQ0FBQztZQUNOLEtBQUssR0FBRztnQkFDSixPQUFPLENBQ0gsS0FBSyxDQUFDLFdBQVcsRUFBRSxHQUFHLEtBQUssQ0FBQyxXQUFXLEVBQUU7b0JBQ3pDLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxLQUFLLEtBQUssQ0FBQyxXQUFXLEVBQUUsSUFBSSxLQUFLLENBQUMsUUFBUSxFQUFFLEdBQUcsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO29CQUNwRixDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsS0FBSyxLQUFLLENBQUMsV0FBVyxFQUFFO3dCQUN4QyxLQUFLLENBQUMsUUFBUSxFQUFFLEtBQUssS0FBSyxDQUFDLFFBQVEsRUFBRTt3QkFDckMsS0FBSyxDQUFDLE9BQU8sRUFBRSxHQUFHLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUN6QyxDQUFDO1lBQ04sS0FBSyxJQUFJO2dCQUNMLE9BQU8sQ0FDSCxLQUFLLENBQUMsV0FBVyxFQUFFLEdBQUcsS0FBSyxDQUFDLFdBQVcsRUFBRTtvQkFDekMsQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLEtBQUssS0FBSyxDQUFDLFdBQVcsRUFBRSxJQUFJLEtBQUssQ0FBQyxRQUFRLEVBQUUsR0FBRyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7b0JBQ3BGLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxLQUFLLEtBQUssQ0FBQyxXQUFXLEVBQUU7d0JBQ3hDLEtBQUssQ0FBQyxRQUFRLEVBQUUsS0FBSyxLQUFLLENBQUMsUUFBUSxFQUFFO3dCQUNyQyxLQUFLLENBQUMsT0FBTyxFQUFFLElBQUksS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQzFDLENBQUM7WUFDTjtnQkFDSSxPQUFPLEtBQUssQ0FBQztTQUNwQjtJQUNMLENBQUM7OEdBckRRLGdCQUFnQjs0R0FBaEIsZ0JBQWdCOzsyRkFBaEIsZ0JBQWdCO2tCQUo1QixJQUFJO21CQUFDO29CQUNGLElBQUksRUFBRSxrQkFBa0I7b0JBQ3hCLFVBQVUsRUFBRSxJQUFJO2lCQUNuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuXG50eXBlIERhdGVDb21wYXJpc29uT3BlcmF0b3IgPSBcIj09XCIgfCBcIiE9XCIgfCBcIjxcIiB8IFwiPD1cIiB8IFwiPlwiIHwgXCI+PVwiO1xuXG5AUGlwZSh7XG4gICAgbmFtZTogXCJtb25hRGF0ZUNvbXBhcmVyXCIsXG4gICAgc3RhbmRhbG9uZTogdHJ1ZVxufSlcbmV4cG9ydCBjbGFzcyBEYXRlQ29tcGFyZXJQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gICAgcHVibGljIHRyYW5zZm9ybSh2YWx1ZTogRGF0ZSB8IG51bGwsIG90aGVyOiBEYXRlIHwgbnVsbCwgb3BlcmF0b3I6IERhdGVDb21wYXJpc29uT3BlcmF0b3IpOiBib29sZWFuIHtcbiAgICAgICAgaWYgKHZhbHVlID09PSBudWxsIHx8IG90aGVyID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgc3dpdGNoIChvcGVyYXRvcikge1xuICAgICAgICAgICAgY2FzZSBcIj09XCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUuZ2V0RGF0ZSgpID09PSBvdGhlci5nZXREYXRlKCkgJiZcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUuZ2V0TW9udGgoKSA9PT0gb3RoZXIuZ2V0TW9udGgoKSAmJlxuICAgICAgICAgICAgICAgICAgICB2YWx1ZS5nZXRGdWxsWWVhcigpID09PSBvdGhlci5nZXRGdWxsWWVhcigpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGNhc2UgXCIhPVwiOlxuICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlLmdldERhdGUoKSAhPT0gb3RoZXIuZ2V0RGF0ZSgpIHx8XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlLmdldE1vbnRoKCkgIT09IG90aGVyLmdldE1vbnRoKCkgfHxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUuZ2V0RnVsbFllYXIoKSAhPT0gb3RoZXIuZ2V0RnVsbFllYXIoKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICBjYXNlIFwiPFwiOlxuICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlLmdldEZ1bGxZZWFyKCkgPCBvdGhlci5nZXRGdWxsWWVhcigpIHx8XG4gICAgICAgICAgICAgICAgICAgICh2YWx1ZS5nZXRGdWxsWWVhcigpID09PSBvdGhlci5nZXRGdWxsWWVhcigpICYmIHZhbHVlLmdldE1vbnRoKCkgPCBvdGhlci5nZXRNb250aCgpKSB8fFxuICAgICAgICAgICAgICAgICAgICAodmFsdWUuZ2V0RnVsbFllYXIoKSA9PT0gb3RoZXIuZ2V0RnVsbFllYXIoKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUuZ2V0TW9udGgoKSA9PT0gb3RoZXIuZ2V0TW9udGgoKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUuZ2V0RGF0ZSgpIDwgb3RoZXIuZ2V0RGF0ZSgpKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICBjYXNlIFwiPD1cIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZS5nZXRGdWxsWWVhcigpIDwgb3RoZXIuZ2V0RnVsbFllYXIoKSB8fFxuICAgICAgICAgICAgICAgICAgICAodmFsdWUuZ2V0RnVsbFllYXIoKSA9PT0gb3RoZXIuZ2V0RnVsbFllYXIoKSAmJiB2YWx1ZS5nZXRNb250aCgpIDwgb3RoZXIuZ2V0TW9udGgoKSkgfHxcbiAgICAgICAgICAgICAgICAgICAgKHZhbHVlLmdldEZ1bGxZZWFyKCkgPT09IG90aGVyLmdldEZ1bGxZZWFyKCkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlLmdldE1vbnRoKCkgPT09IG90aGVyLmdldE1vbnRoKCkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlLmdldERhdGUoKSA8PSBvdGhlci5nZXREYXRlKCkpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGNhc2UgXCI+XCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUuZ2V0RnVsbFllYXIoKSA+IG90aGVyLmdldEZ1bGxZZWFyKCkgfHxcbiAgICAgICAgICAgICAgICAgICAgKHZhbHVlLmdldEZ1bGxZZWFyKCkgPT09IG90aGVyLmdldEZ1bGxZZWFyKCkgJiYgdmFsdWUuZ2V0TW9udGgoKSA+IG90aGVyLmdldE1vbnRoKCkpIHx8XG4gICAgICAgICAgICAgICAgICAgICh2YWx1ZS5nZXRGdWxsWWVhcigpID09PSBvdGhlci5nZXRGdWxsWWVhcigpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZS5nZXRNb250aCgpID09PSBvdGhlci5nZXRNb250aCgpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZS5nZXREYXRlKCkgPiBvdGhlci5nZXREYXRlKCkpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGNhc2UgXCI+PVwiOlxuICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlLmdldEZ1bGxZZWFyKCkgPiBvdGhlci5nZXRGdWxsWWVhcigpIHx8XG4gICAgICAgICAgICAgICAgICAgICh2YWx1ZS5nZXRGdWxsWWVhcigpID09PSBvdGhlci5nZXRGdWxsWWVhcigpICYmIHZhbHVlLmdldE1vbnRoKCkgPiBvdGhlci5nZXRNb250aCgpKSB8fFxuICAgICAgICAgICAgICAgICAgICAodmFsdWUuZ2V0RnVsbFllYXIoKSA9PT0gb3RoZXIuZ2V0RnVsbFllYXIoKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUuZ2V0TW9udGgoKSA9PT0gb3RoZXIuZ2V0TW9udGgoKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUuZ2V0RGF0ZSgpID49IG90aGVyLmdldERhdGUoKSlcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=