import { ChangeDetectionStrategy, Component, Input } from "@angular/core";
import { fromEvent, mergeWith, Subject, takeUntil } from "rxjs";
import { faChevronDown, faChevronRight } from "@fortawesome/free-solid-svg-icons";
import { Dictionary, KeyValuePair } from "@mirei/ts-collections";
import * as i0 from "@angular/core";
import * as i1 from "../../services/grid.service";
import * as i2 from "@angular/common";
import * as i3 from "../../../buttons/modules/button/directives/button.directive";
import * as i4 from "@fortawesome/angular-fontawesome";
import * as i5 from "../grid-cell/grid-cell.component";
import * as i6 from "../../../pipes/slice.pipe";
import * as i7 from "../../pipes/grid-group.pipe";
export class GridListComponent {
    #destroy;
    constructor(gridService, elementRef) {
        this.gridService = gridService;
        this.elementRef = elementRef;
        this.#destroy = new Subject();
        this.collapseIcon = faChevronDown;
        this.expandIcon = faChevronRight;
        this.columns = [];
        this.data = [];
    }
    ngAfterViewInit() {
        window.setTimeout(() => {
            this.synchronizeHorizontalScroll();
        }, 0);
    }
    ngOnDestroy() {
        this.#destroy.next();
        this.#destroy.complete();
    }
    ngOnInit() {
        this.setSubscriptions();
    }
    onGridRowClick(event, row) {
        if (this.gridService.selectableOptions == null || !this.gridService.selectableOptions.enabled) {
            return;
        }
        if (this.gridService.selectableOptions.mode === "single") {
            if (row.selected && (event.ctrlKey || event.metaKey)) {
                this.gridService.selectedRows = [];
                row.selected = false;
            }
            else {
                if (this.gridService.selectedRows.length !== 0) {
                    this.gridService.selectedRows.forEach(r => (r.selected = false));
                }
                this.gridService.selectedRows = [row];
                row.selected = true;
            }
        }
        else if (this.gridService.selectableOptions.mode === "multiple") {
            if (this.gridService.selectedRows.length === 0) {
                this.gridService.selectedRows = [row];
                row.selected = true;
            }
            else {
                const index = this.gridService.selectedRows.findIndex(r => r === row);
                if (index === -1) {
                    this.gridService.selectedRows = [...this.gridService.selectedRows, row];
                    row.selected = true;
                }
                else {
                    if (event.ctrlKey || event.metaKey) {
                        this.gridService.selectedRows.splice(index, 1);
                        row.selected = false;
                    }
                }
            }
        }
        this.gridService.selectedRowsChange$.next(this.gridService.selectedRows);
    }
    onGroupExpandChange(group) {
        group.collapsed = !group.collapsed;
        const groupKey = `${group.column.field}-${group.rows[0].data[group.column.field]}`;
        const state = this.gridService.gridGroupExpandState.get(groupKey);
        if (state == null) {
            this.gridService.gridGroupExpandState.add(groupKey, new Dictionary(undefined, [
                new KeyValuePair(this.gridService.pageState.page, group.collapsed)
            ]));
        }
        else {
            if (state.containsKey(this.gridService.pageState.page)) {
                const value = state.get(this.gridService.pageState.page);
                if (value != null) {
                    state.remove(this.gridService.pageState.page);
                    state.add(this.gridService.pageState.page, !value);
                }
            }
            else {
                state.add(this.gridService.pageState.page, group.collapsed);
            }
        }
    }
    setSubscriptions() {
        fromEvent(document, "click")
            .pipe(mergeWith(fromEvent(document, "keyup")), takeUntil(this.#destroy))
            .subscribe(e => {
            if (e.type === "click") {
                const event = e;
                const target = event.target;
                if (target.closest(".mona-grid-cell") == null) {
                    this.gridService.isInEditMode = false;
                }
            }
            if (e.type === "keyup") {
                const event = e;
                if (event.key === "Escape") {
                    this.gridService.isInEditMode = false;
                }
            }
        });
    }
    synchronizeHorizontalScroll() {
        const headerElement = this.gridService.gridHeaderElement;
        const gridElement = this.elementRef.nativeElement.querySelector(".mona-grid-list");
        if (headerElement == null || gridElement == null) {
            return;
        }
        fromEvent(gridElement, "scroll")
            .pipe(takeUntil(this.#destroy))
            .subscribe(() => {
            headerElement.scrollLeft = gridElement.scrollLeft;
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: GridListComponent, deps: [{ token: i1.GridService }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.0.0", type: GridListComponent, selector: "mona-grid-list", inputs: { columns: "columns", data: "data" }, ngImport: i0, template: "<div class=\"mona-grid-list\">\n    <div class=\"mona-grid-list-wrap\">\n        <table>\n            <colgroup>\n                <col *ngFor=\"let _ of gridService.groupColumns\" style=\"width: 34px;\">\n                <col *ngFor=\"let column of gridService.columns\"\n                     [style.width.px]=\"column.calculatedWidth\" [style.min-width.px]=\"column.minWidth\">\n            </colgroup>\n            <tbody>\n                <ng-container *ngIf=\"gridService.groupColumns.length === 0\">\n                    <tr *ngFor=\"let row of data; let rx=index;\" (click)=\"onGridRowClick($event, row)\" [ngClass]=\"{'mona-selected': row.selected}\"\n                        [attr.data-ruid]=\"row.uid\" [attr.data-row-view-index]=\"rx\">\n                        <td *ngFor=\"let column of columns\">\n                            <mona-grid-cell [column]=\"column\" [row]=\"row\"></mona-grid-cell>\n                        </td>\n                    </tr>\n                </ng-container>\n                <ng-container *ngIf=\"gridService.groupColumns.length !== 0\">\n                    <ng-template #gridGroupTemplate let-groupData let-column=\"column\" let-cx=\"cx\" let-depth=\"depth\">\n                        <ng-container *ngIf=\"groupData|gridGroup:column:gridService.pageState.page as groupItem\">\n                            <ng-container *ngFor=\"let subGroup of groupItem\">\n                                <tr class=\"mona-grid-grouping-row\">\n                                    <td *ngFor=\"let _ of gridService.groupColumns|monaSlice:0:cx\"></td>\n                                    <td [colSpan]=\"columns.length + gridService.groupColumns.length\"\n                                        *ngIf=\"subGroup.rows.length > 0\">\n                                        <button monaButton [flat]=\"true\" style=\"width: 34px;\" (click)=\"onGroupExpandChange(subGroup)\">\n                                            <fa-icon [icon]=\"collapseIcon\" *ngIf=\"!subGroup.collapsed\"></fa-icon>\n                                            <fa-icon [icon]=\"expandIcon\" *ngIf=\"subGroup.collapsed\"></fa-icon>\n                                        </button>\n                                        <span class=\"mona-grid-grouping-row-text\">{{column.title}}: {{subGroup.rows[0].data[column.field]}}</span>\n                                    </td>\n                                </tr>\n\n                                <ng-container *ngIf=\"cx < gridService.groupColumns.length-1 && !subGroup.collapsed\">\n                                    <ng-container [ngTemplateOutlet]=\"gridGroupTemplate\"\n                                                  [ngTemplateOutletContext]=\"{$implicit: subGroup.rows, column: gridService.groupColumns[cx+1], cx: cx+1, depth:depth+1}\">\n                                    </ng-container>\n                                </ng-container>\n                                <ng-container *ngIf=\"depth===gridService.groupColumns.length-1 && !subGroup.collapsed\">\n                                    <tr *ngFor=\"let row of subGroup.rows; let rx=index;\" (click)=\"onGridRowClick($event, row)\" [ngClass]=\"{'mona-selected': row.selected}\"\n                                        [attr.data-ruid]=\"row.uid\" [attr.data-row-view-index]=\"rx\">\n                                        <td *ngFor=\"let _ of gridService.groupColumns\"></td>\n                                        <td *ngFor=\"let column of columns\">\n                                            <mona-grid-cell [column]=\"column\" [row]=\"row\"></mona-grid-cell>\n                                        </td>\n                                    </tr>\n                                </ng-container>\n                            </ng-container>\n                        </ng-container>\n                    </ng-template>\n\n                    <ng-container [ngTemplateOutlet]=\"gridGroupTemplate\"\n                                  [ngTemplateOutletContext]=\"{$implicit: data, column: gridService.groupColumns[0], cx: 0, depth: 0}\"></ng-container>\n                </ng-container>\n            </tbody>\n        </table>\n    </div>\n</div>\n", styles: [":host{overflow:hidden;height:100%;display:flex}div.mona-grid-list{overflow:auto scroll;width:100%}table{border-collapse:collapse;width:100%;height:100%;table-layout:fixed}table tbody{text-align:left}table tr:nth-child(even){background-color:var(--mona-background-dark)}table tr:nth-child(odd){background-color:var(--mona-background)}table tr:not(:last-child){border-bottom:1px solid var(--mona-border-color)}table td{position:relative}table td:not(:last-child){border-right:1px solid var(--mona-border-color)}tr.mona-grid-grouping-row>td:last-child{font-weight:bolder;padding:0}span.mona-grid-grouping-row-text{font-weight:bolder;margin-left:8px}\n"], dependencies: [{ kind: "directive", type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: i3.ButtonDirective, selector: "[monaButton]", inputs: ["disabled", "flat", "primary", "selected", "toggleable"], outputs: ["selectedChange"] }, { kind: "component", type: i4.FaIconComponent, selector: "fa-icon", inputs: ["icon", "title", "spin", "pulse", "mask", "styles", "flip", "size", "pull", "border", "inverse", "symbol", "rotate", "fixedWidth", "classes", "transform", "a11yRole"] }, { kind: "component", type: i5.GridCellComponent, selector: "mona-grid-cell", inputs: ["column", "row"] }, { kind: "pipe", type: i6.SlicePipe, name: "monaSlice" }, { kind: "pipe", type: i7.GridGroupPipe, name: "gridGroup" }], changeDetection: i0.ChangeDetectionStrategy.Default }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: GridListComponent, decorators: [{
            type: Component,
            args: [{ selector: "mona-grid-list", changeDetection: ChangeDetectionStrategy.Default, template: "<div class=\"mona-grid-list\">\n    <div class=\"mona-grid-list-wrap\">\n        <table>\n            <colgroup>\n                <col *ngFor=\"let _ of gridService.groupColumns\" style=\"width: 34px;\">\n                <col *ngFor=\"let column of gridService.columns\"\n                     [style.width.px]=\"column.calculatedWidth\" [style.min-width.px]=\"column.minWidth\">\n            </colgroup>\n            <tbody>\n                <ng-container *ngIf=\"gridService.groupColumns.length === 0\">\n                    <tr *ngFor=\"let row of data; let rx=index;\" (click)=\"onGridRowClick($event, row)\" [ngClass]=\"{'mona-selected': row.selected}\"\n                        [attr.data-ruid]=\"row.uid\" [attr.data-row-view-index]=\"rx\">\n                        <td *ngFor=\"let column of columns\">\n                            <mona-grid-cell [column]=\"column\" [row]=\"row\"></mona-grid-cell>\n                        </td>\n                    </tr>\n                </ng-container>\n                <ng-container *ngIf=\"gridService.groupColumns.length !== 0\">\n                    <ng-template #gridGroupTemplate let-groupData let-column=\"column\" let-cx=\"cx\" let-depth=\"depth\">\n                        <ng-container *ngIf=\"groupData|gridGroup:column:gridService.pageState.page as groupItem\">\n                            <ng-container *ngFor=\"let subGroup of groupItem\">\n                                <tr class=\"mona-grid-grouping-row\">\n                                    <td *ngFor=\"let _ of gridService.groupColumns|monaSlice:0:cx\"></td>\n                                    <td [colSpan]=\"columns.length + gridService.groupColumns.length\"\n                                        *ngIf=\"subGroup.rows.length > 0\">\n                                        <button monaButton [flat]=\"true\" style=\"width: 34px;\" (click)=\"onGroupExpandChange(subGroup)\">\n                                            <fa-icon [icon]=\"collapseIcon\" *ngIf=\"!subGroup.collapsed\"></fa-icon>\n                                            <fa-icon [icon]=\"expandIcon\" *ngIf=\"subGroup.collapsed\"></fa-icon>\n                                        </button>\n                                        <span class=\"mona-grid-grouping-row-text\">{{column.title}}: {{subGroup.rows[0].data[column.field]}}</span>\n                                    </td>\n                                </tr>\n\n                                <ng-container *ngIf=\"cx < gridService.groupColumns.length-1 && !subGroup.collapsed\">\n                                    <ng-container [ngTemplateOutlet]=\"gridGroupTemplate\"\n                                                  [ngTemplateOutletContext]=\"{$implicit: subGroup.rows, column: gridService.groupColumns[cx+1], cx: cx+1, depth:depth+1}\">\n                                    </ng-container>\n                                </ng-container>\n                                <ng-container *ngIf=\"depth===gridService.groupColumns.length-1 && !subGroup.collapsed\">\n                                    <tr *ngFor=\"let row of subGroup.rows; let rx=index;\" (click)=\"onGridRowClick($event, row)\" [ngClass]=\"{'mona-selected': row.selected}\"\n                                        [attr.data-ruid]=\"row.uid\" [attr.data-row-view-index]=\"rx\">\n                                        <td *ngFor=\"let _ of gridService.groupColumns\"></td>\n                                        <td *ngFor=\"let column of columns\">\n                                            <mona-grid-cell [column]=\"column\" [row]=\"row\"></mona-grid-cell>\n                                        </td>\n                                    </tr>\n                                </ng-container>\n                            </ng-container>\n                        </ng-container>\n                    </ng-template>\n\n                    <ng-container [ngTemplateOutlet]=\"gridGroupTemplate\"\n                                  [ngTemplateOutletContext]=\"{$implicit: data, column: gridService.groupColumns[0], cx: 0, depth: 0}\"></ng-container>\n                </ng-container>\n            </tbody>\n        </table>\n    </div>\n</div>\n", styles: [":host{overflow:hidden;height:100%;display:flex}div.mona-grid-list{overflow:auto scroll;width:100%}table{border-collapse:collapse;width:100%;height:100%;table-layout:fixed}table tbody{text-align:left}table tr:nth-child(even){background-color:var(--mona-background-dark)}table tr:nth-child(odd){background-color:var(--mona-background)}table tr:not(:last-child){border-bottom:1px solid var(--mona-border-color)}table td{position:relative}table td:not(:last-child){border-right:1px solid var(--mona-border-color)}tr.mona-grid-grouping-row>td:last-child{font-weight:bolder;padding:0}span.mona-grid-grouping-row-text{font-weight:bolder;margin-left:8px}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.GridService }, { type: i0.ElementRef }]; }, propDecorators: { columns: [{
                type: Input
            }], data: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,