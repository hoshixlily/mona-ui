import { ChangeDetectionStrategy, Component, ContentChildren, EventEmitter, Input, Output, QueryList, ViewChild } from "@angular/core";
import { GridService } from "../../services/grid.service";
import { faArrowDownLong, faArrowUpLong } from "@fortawesome/free-solid-svg-icons";
import { GridColumnComponent } from "../grid-column/grid-column.component";
import { Subject, takeUntil } from "rxjs";
import { Enumerable } from "@mirei/ts-collections";
import * as i0 from "@angular/core";
import * as i1 from "../../services/grid.service";
import * as i2 from "@angular/common";
import * as i3 from "@fortawesome/angular-fontawesome";
import * as i4 from "../../../pager/components/pager/pager.component";
import * as i5 from "@angular/cdk/drag-drop";
import * as i6 from "../../../buttons/modules/chip/components/chip/chip.component";
import * as i7 from "../grid-list/grid-list.component";
import * as i8 from "../../directives/grid-column-resize-handler.directive";
import * as i9 from "../grid-filter-menu/grid-filter-menu.component";
import * as i10 from "../../pipes/grid-filter.pipe";
import * as i11 from "../../pipes/grid-page.pipe";
export class GridComponent {
    #destroy$;
    #filter;
    #sort;
    set data(value) {
        this.gridService.setRows(value);
    }
    set filter(value) {
        if (this.#filter !== value) {
            this.#filter = value;
            this.gridService.loadFilters(value);
        }
    }
    get filter() {
        return this.#filter;
    }
    set gridHeaderElement(value) {
        this.gridService.gridHeaderElement = value.nativeElement;
        window.setTimeout(() => this.setInitialCalculatedWidthOfColumns());
    }
    set pageSize(value) {
        this.gridService.pageState.take = value;
    }
    set sort(value) {
        if (this.#sort !== value) {
            this.#sort = value;
            this.gridService.loadSorts(value);
        }
    }
    get sort() {
        return this.#sort;
    }
    set sortable(options) {
        if (typeof options === "boolean") {
            this.gridService.setSortableOptions({ enabled: true });
        }
        else {
            this.gridService.setSortableOptions(options);
        }
    }
    constructor(gridService, cdr, elementRef) {
        this.gridService = gridService;
        this.cdr = cdr;
        this.elementRef = elementRef;
        this.#destroy$ = new Subject();
        this.#filter = [];
        this.#sort = [];
        this.ascendingSortIcon = faArrowUpLong;
        this.descendingSortIcon = faArrowDownLong;
        this.columnDragging = false;
        this.gridColumns = [];
        this.groupPanelPlaceholderVisible = true;
        this.resizing = false;
        this.cellEdit = new EventEmitter();
        this.columns = new QueryList();
        this.filterable = false;
        this.filterChange = new EventEmitter();
        this.groupable = false;
        this.pageSizeValues = [];
        this.reorderable = false;
        this.resizable = false;
        this.sortChange = new EventEmitter();
    }
    ngAfterContentInit() {
        const processColumns = () => {
            this.gridColumns = this.columns.map(c => c.column);
            this.gridService.columns = this.gridColumns;
            this.gridService.columns.forEach((c, i) => (c.index = i));
            if (this.filter.length !== 0) {
                this.gridService.loadFilters(this.filter);
            }
            if (this.sort.length !== 0) {
                this.gridService.loadSorts(this.sort);
            }
        };
        processColumns();
        this.columns.changes.pipe(takeUntil(this.#destroy$)).subscribe(() => {
            processColumns();
        });
    }
    ngAfterViewInit() {
        this.cdr.detectChanges();
    }
    ngOnChanges(changes) { }
    ngOnDestroy() {
        this.#destroy$.next();
        this.#destroy$.complete();
    }
    ngOnInit() {
        this.setSubscriptions();
    }
    onColumnDragEnter(event, column) {
        this.groupPanelPlaceholderVisible = event.container !== this.groupColumnList;
    }
    onColumnDragStart(event) {
        if (this.resizing) {
            return;
        }
        this.columnDragging = true;
        this.dragColumn = event.source.data;
    }
    onColumnDrop(event) {
        if (!this.dropColumn || !this.dragColumn || !this.columnDragging || this.resizing || !this.reorderable) {
            return;
        }
        const dropColumnIndex = this.gridService.columns.findIndex(c => c.field === this.dropColumn?.field);
        const dragColumnIndex = this.gridService.columns.findIndex(c => c.field === this.dragColumn?.field);
        this.gridService.columns.splice(dropColumnIndex, 0, this.gridService.columns.splice(dragColumnIndex, 1)[0]);
        this.gridService.columns.forEach((c, i) => (c.index = i));
        this.gridService.columns = [...this.gridService.columns];
        this.columnDragging = false;
        this.dragColumn = undefined;
        this.dropColumn = undefined;
    }
    onColumnDropForGrouping(event) {
        if (!this.groupable) {
            return;
        }
        const column = event.item.data;
        this.gridService.groupColumns = [...this.gridService.groupColumns, column];
        if (!this.gridService.appliedSorts.containsKey(column.field)) {
            this.onColumnSort(column);
        }
        this.columnDragging = false;
        this.dragColumn = undefined;
        this.dropColumn = undefined;
    }
    onColumnFilter(column, state) {
        if (state.filter && state.filter.filters.length > 0) {
            this.gridService.appliedFilters.put(column.field, state);
            column.filtered = true;
        }
        else {
            this.gridService.appliedFilters.remove(column.field);
            column.filtered = false;
        }
        this.gridService.appliedFilters = this.gridService.appliedFilters.toDictionary(p => p.key, p => p.value);
        const allFilters = this.gridService.appliedFilters
            .values()
            .select(p => p.filter)
            .where(f => f != null);
        if (allFilters.any()) {
            this.#filter = allFilters.toArray();
        }
        else {
            this.#filter = [];
        }
        this.filterChange.emit(this.#filter);
    }
    onColumnMouseEnter(event, column) {
        if (!this.columnDragging || this.resizing) {
            return;
        }
        this.dropColumn = column;
    }
    onColumnSort(column) {
        if (!this.gridService.sortableOptions.enabled) {
            return;
        }
        if (column.sortDirection == null) {
            column.sortDirection = "asc";
        }
        else if (column.sortDirection === "asc") {
            column.sortDirection = "desc";
        }
        else {
            if (this.gridService.groupColumns.map(c => c.field).includes(column.field)) {
                column.sortDirection = "asc";
            }
            else {
                if (this.gridService.sortableOptions.allowUnsort) {
                    column.sortDirection = undefined;
                    column.sortIndex = undefined;
                }
                else {
                    column.sortDirection = "asc";
                }
            }
        }
        this.applyColumnSort(column, column.sortDirection);
        this.#sort = this.gridService.appliedSorts
            .values()
            .select(s => s.sort)
            .toArray();
        this.sortChange.emit(this.#sort);
    }
    onGroupingColumnRemove(event, column) {
        event.stopPropagation();
        this.gridService.groupColumns = this.gridService.groupColumns.filter(c => c.field !== column.field);
        this.gridService.gridGroupExpandState = this.gridService.gridGroupExpandState
            .where(p => !p.key.startsWith(column.field))
            .toDictionary(p => p.key, p => p.value);
        this.applyColumnSort(column, undefined);
        this.groupPanelPlaceholderVisible = this.gridService.groupColumns.length === 0;
    }
    onPageChange(event) {
        this.gridService.pageState = {
            page: event.page,
            skip: event.skip,
            take: event.take
        };
        const scrollableElement = this.elementRef.nativeElement.querySelector("div.mona-grid-list");
        if (scrollableElement) {
            scrollableElement.scrollTop = 0;
        }
        this.cdr.detectChanges();
    }
    onPageSizeChange(data) {
        this.gridService.pageState = {
            page: 1,
            skip: 0,
            take: data.newPageSize
        };
        this.cdr.detectChanges();
    }
    applyColumnSort(column, sortDirection) {
        column.sortDirection = sortDirection;
        if (this.gridService.sortableOptions.mode === "single") {
            Enumerable.from(this.gridService.columns)
                .where(c => c.field !== column.field)
                .forEach(c => {
                c.sortDirection = undefined;
                c.sortIndex = undefined;
                this.gridService.appliedSorts.remove(c.field);
            });
        }
        if (column.sortDirection != null) {
            const sortDescriptor = {
                field: column.field,
                dir: column.sortDirection
            };
            this.gridService.appliedSorts.put(column.field, { sort: sortDescriptor });
        }
        else {
            this.gridService.appliedSorts.remove(column.field);
            column.sortIndex = undefined;
        }
        this.gridService.appliedSorts.keys().forEach((field, fx) => {
            const col = this.gridService.columns.find(c => c.field === field);
            if (col) {
                col.sortIndex = fx + 1;
            }
        });
        this.gridService.appliedSorts = this.gridService.appliedSorts.toDictionary(p => p.key, p => p.value);
    }
    setInitialCalculatedWidthOfColumns() {
        if (this.gridService.gridHeaderElement) {
            const thList = this.gridService.gridHeaderElement?.querySelectorAll("th");
            for (const [cx, column] of Array.from(thList).entries()) {
                this.gridService.columns[cx].calculatedWidth = column.offsetWidth;
            }
        }
    }
    setSubscriptions() {
        this.gridService.cellEdit$
            .pipe(takeUntil(this.#destroy$))
            .subscribe((event) => this.cellEdit.emit(event));
    }
    get headerMargin() {
        const rightMargin = 12;
        return `0 ${rightMargin}px 0 0`;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: GridComponent, deps: [{ token: i1.GridService }, { token: i0.ChangeDetectorRef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.0.0", type: GridComponent, selector: "mona-grid", inputs: { data: "data", filter: "filter", groupable: "groupable", pageSize: "pageSize", pageSizeValues: "pageSizeValues", reorderable: "reorderable", resizable: "resizable", sort: "sort", sortable: "sortable" }, outputs: { cellEdit: "cellEdit", filterChange: "filterChange", sortChange: "sortChange" }, providers: [GridService], queries: [{ propertyName: "columns", predicate: GridColumnComponent }], viewQueries: [{ propertyName: "gridHeaderElement", first: true, predicate: ["gridHeaderElement"], descendants: true }, { propertyName: "groupColumnList", first: true, predicate: ["groupColumnList"], descendants: true }], usesOnChanges: true, ngImport: i0, template: "<div class=\"mona-grid\">\n    <div class=\"mona-grid-group-panel\" cdkDropList #groupColumnList=\"cdkDropList\" cdkDropListOrientation=\"horizontal\"\n         (cdkDropListDropped)=\"onColumnDropForGrouping($event)\" *ngIf=\"groupable\">\n        <ng-container *ngIf=\"gridService.groupColumns.length !== 0; else noGroupColumnsTemplate;\">\n            <mona-chip *ngFor=\"let groupColumn of gridService.groupColumns\" [removable]=\"true\" (remove)=\"onGroupingColumnRemove($event, groupColumn)\">\n                <span>{{groupColumn.title}}</span>\n            </mona-chip>\n        </ng-container>\n        <ng-template #noGroupColumnsTemplate>\n            <span class=\"mona-grid-group-panel-placeholder\" *ngIf=\"groupPanelPlaceholderVisible\">Drag a column header here to group</span>\n        </ng-template>\n    </div>\n    <div class=\"mona-grid-header\" [ngStyle]=\"{'margin': headerMargin}\" #gridHeaderElement>\n        <div class=\"mona-grid-header-wrap\">\n            <table>\n                <colgroup>\n                    <col *ngFor=\"let _ of gridService.groupColumns\" style=\"width: 34px;\">\n                    <col *ngFor=\"let column of gridService.columns\" [style.width.px]=\"column.calculatedWidth\" [style.min-width.px]=\"column.minWidth\">\n                </colgroup>\n                <thead>\n                    <tr cdkDropList [cdkDropListConnectedTo]=\"groupable ? [groupColumnList!] : []\" (cdkDropListDropped)=\"onColumnDrop($event)\">\n                        <td *ngFor=\"let _ of gridService.groupColumns\"></td>\n                        <th *ngFor=\"let column of gridService.columns\" cdkDrag [cdkDragData]=\"column\" [cdkDragDisabled]=\"!reorderable && !groupable\"\n                            (mousemove)=\"onColumnMouseEnter($event, column)\" (cdkDragEntered)=\"onColumnDragEnter($event, column)\"\n                            (cdkDragStarted)=\"onColumnDragStart($event)\">\n                            <div class=\"mona-grid-column-wrap\">\n                                <span class=\"mona-grid-column-title\" (click)=\"onColumnSort(column)\">{{column.title}}</span>\n                                <div class=\"mona-grid-column-actions\">\n                                    <span *ngIf=\"gridService.sortableOptions.showIndices && column.sortIndex != null\">{{column.sortIndex}}</span>\n                                    <fa-icon [icon]=\"ascendingSortIcon\" *ngIf=\"column.sortDirection==='asc'\"></fa-icon>\n                                    <fa-icon [icon]=\"descendingSortIcon\" *ngIf=\"column.sortDirection==='desc'\"></fa-icon>\n                                    <mona-grid-filter-menu [column]=\"column\" [type]=\"column.filterType\" (apply)=\"onColumnFilter(column, $event)\"\n                                                           *ngIf=\"filterable\"></mona-grid-filter-menu>\n                                </div>\n                            </div>\n                            <span class=\"mona-grid-column-drop-hint\" *ngIf=\"dropColumn === column && dragColumn && reorderable\"\n                                  [ngStyle]=\"{'right': dragColumn.index < dropColumn.index ? '-1px': null, 'left': dragColumn.index > dropColumn.index ? '-1px': null}\"></span>\n                            <div monaGridColumnResizeHandler [column]=\"column\" class=\"mona-grid-column-resizer\" *ngIf=\"resizable && !columnDragging\"\n                                 (resizeStart)=\"resizing=true;\" (resizeEnd)=\"resizing=false;\"></div>\n                            <ng-template cdkDragPreview>\n                                <div class=\"mona-grid-column-drag-preview\">\n                                    <span class=\"mona-grid-column-title\">{{column.title}}</span>\n                                </div>\n                            </ng-template>\n                        </th>\n                    </tr>\n                </thead>\n            </table>\n        </div>\n    </div>\n    <ng-container *ngIf=\"(gridService.rows|gridFilter:gridService.appliedFilters:gridService.appliedSorts) as filteredData\">\n        <ng-container *ngIf=\"filteredData|gridPage:gridService.pageState.skip:gridService.pageState.take as viewData\">\n            <mona-grid-list [columns]=\"gridService.columns\" [data]=\"viewData\"></mona-grid-list>\n            <mona-pager [skip]=\"gridService.pageState.skip\" [pageSize]=\"gridService.pageState.take\" [total]=\"filteredData.length\"\n                        [pageInput]=\"true\" [pageSizeValues]=\"pageSizeValues\" (pageSizeChange)=\"onPageSizeChange($event)\"\n                        (pageChange)=\"onPageChange($event)\"></mona-pager>\n        </ng-container>\n    </ng-container>\n</div>\n", styles: [":host{position:relative;display:block;overflow:hidden}div.mona-grid{height:100%;display:flex;flex-direction:column;background:var(--mona-background-dark);border:1px solid var(--mona-border-color)}.mona-grid-group-panel{display:flex;align-items:center;padding:5px;height:40px;border-bottom:1px solid var(--mona-border-color)}.mona-grid-group-panel mona-chip{margin-right:5px}.mona-grid-group-panel-placeholder{opacity:.7}.mona-grid-header{background-color:var(--mona-background-dark);border-right:1px solid var(--mona-border-color);overflow:hidden;display:flex;flex-direction:row;flex:0 0 auto}.mona-grid-header table{border-collapse:collapse;table-layout:fixed;width:100%}.mona-grid-header table tr{position:relative}.mona-grid-header table th{white-space:nowrap;text-overflow:ellipsis;text-align:left;position:relative;-webkit-user-select:none;user-select:none}.mona-grid-header table th:not(:last-child){border-right:1px solid var(--mona-border-color)}mona-grid-list{border-top:1px solid var(--mona-border-color)}div.mona-grid-column-resizer{position:absolute;top:0;bottom:0;width:10px;background-color:transparent;cursor:col-resize;z-index:1;right:-5px}div.mona-grid-column-wrap{width:100%;height:100%;display:flex;align-items:center;justify-content:space-between;cursor:pointer}span.mona-grid-column-title{flex:1;padding:10px;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;font-weight:700}div.mona-grid-column-actions{display:flex;align-items:center;justify-content:center;padding:0 4px}span.mona-grid-column-drop-hint{position:absolute;display:flex;width:2px;height:100%;background:var(--mona-primary);z-index:1;top:0;bottom:0}\n"], dependencies: [{ kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { kind: "component", type: i3.FaIconComponent, selector: "fa-icon", inputs: ["icon", "title", "spin", "pulse", "mask", "styles", "flip", "size", "pull", "border", "inverse", "symbol", "rotate", "fixedWidth", "classes", "transform", "a11yRole"] }, { kind: "component", type: i4.PagerComponent, selector: "mona-pager", inputs: ["firstLast", "pageInput", "pageSize", "previousNext", "pageSizeValues", "skip", "total", "type", "visiblePages"], outputs: ["pageChange", "pageSizeChange"] }, { kind: "directive", type: i5.CdkDropList, selector: "[cdkDropList], cdk-drop-list", inputs: ["cdkDropListConnectedTo", "cdkDropListData", "cdkDropListOrientation", "id", "cdkDropListLockAxis", "cdkDropListDisabled", "cdkDropListSortingDisabled", "cdkDropListEnterPredicate", "cdkDropListSortPredicate", "cdkDropListAutoScrollDisabled", "cdkDropListAutoScrollStep"], outputs: ["cdkDropListDropped", "cdkDropListEntered", "cdkDropListExited", "cdkDropListSorted"], exportAs: ["cdkDropList"] }, { kind: "directive", type: i5.CdkDrag, selector: "[cdkDrag]", inputs: ["cdkDragData", "cdkDragLockAxis", "cdkDragRootElement", "cdkDragBoundary", "cdkDragStartDelay", "cdkDragFreeDragPosition", "cdkDragDisabled", "cdkDragConstrainPosition", "cdkDragPreviewClass", "cdkDragPreviewContainer"], outputs: ["cdkDragStarted", "cdkDragReleased", "cdkDragEnded", "cdkDragEntered", "cdkDragExited", "cdkDragDropped", "cdkDragMoved"], exportAs: ["cdkDrag"] }, { kind: "directive", type: i5.CdkDragPreview, selector: "ng-template[cdkDragPreview]", inputs: ["data", "matchSize"] }, { kind: "component", type: i6.ChipComponent, selector: "mona-chip", inputs: ["disabled", "label", "removable", "tabindex"], outputs: ["remove"] }, { kind: "component", type: i7.GridListComponent, selector: "mona-grid-list", inputs: ["columns", "data"] }, { kind: "directive", type: i8.GridColumnResizeHandlerDirective, selector: "[monaGridColumnResizeHandler]", inputs: ["column"], outputs: ["resizeEnd", "resizeStart"] }, { kind: "component", type: i9.GridFilterMenuComponent, selector: "mona-grid-filter-menu", inputs: ["column", "type"], outputs: ["apply"] }, { kind: "pipe", type: i10.GridFilterPipe, name: "gridFilter" }, { kind: "pipe", type: i11.GridPagePipe, name: "gridPage" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: GridComponent, decorators: [{
            type: Component,
            args: [{ selector: "mona-grid", changeDetection: ChangeDetectionStrategy.OnPush, providers: [GridService], template: "<div class=\"mona-grid\">\n    <div class=\"mona-grid-group-panel\" cdkDropList #groupColumnList=\"cdkDropList\" cdkDropListOrientation=\"horizontal\"\n         (cdkDropListDropped)=\"onColumnDropForGrouping($event)\" *ngIf=\"groupable\">\n        <ng-container *ngIf=\"gridService.groupColumns.length !== 0; else noGroupColumnsTemplate;\">\n            <mona-chip *ngFor=\"let groupColumn of gridService.groupColumns\" [removable]=\"true\" (remove)=\"onGroupingColumnRemove($event, groupColumn)\">\n                <span>{{groupColumn.title}}</span>\n            </mona-chip>\n        </ng-container>\n        <ng-template #noGroupColumnsTemplate>\n            <span class=\"mona-grid-group-panel-placeholder\" *ngIf=\"groupPanelPlaceholderVisible\">Drag a column header here to group</span>\n        </ng-template>\n    </div>\n    <div class=\"mona-grid-header\" [ngStyle]=\"{'margin': headerMargin}\" #gridHeaderElement>\n        <div class=\"mona-grid-header-wrap\">\n            <table>\n                <colgroup>\n                    <col *ngFor=\"let _ of gridService.groupColumns\" style=\"width: 34px;\">\n                    <col *ngFor=\"let column of gridService.columns\" [style.width.px]=\"column.calculatedWidth\" [style.min-width.px]=\"column.minWidth\">\n                </colgroup>\n                <thead>\n                    <tr cdkDropList [cdkDropListConnectedTo]=\"groupable ? [groupColumnList!] : []\" (cdkDropListDropped)=\"onColumnDrop($event)\">\n                        <td *ngFor=\"let _ of gridService.groupColumns\"></td>\n                        <th *ngFor=\"let column of gridService.columns\" cdkDrag [cdkDragData]=\"column\" [cdkDragDisabled]=\"!reorderable && !groupable\"\n                            (mousemove)=\"onColumnMouseEnter($event, column)\" (cdkDragEntered)=\"onColumnDragEnter($event, column)\"\n                            (cdkDragStarted)=\"onColumnDragStart($event)\">\n                            <div class=\"mona-grid-column-wrap\">\n                                <span class=\"mona-grid-column-title\" (click)=\"onColumnSort(column)\">{{column.title}}</span>\n                                <div class=\"mona-grid-column-actions\">\n                                    <span *ngIf=\"gridService.sortableOptions.showIndices && column.sortIndex != null\">{{column.sortIndex}}</span>\n                                    <fa-icon [icon]=\"ascendingSortIcon\" *ngIf=\"column.sortDirection==='asc'\"></fa-icon>\n                                    <fa-icon [icon]=\"descendingSortIcon\" *ngIf=\"column.sortDirection==='desc'\"></fa-icon>\n                                    <mona-grid-filter-menu [column]=\"column\" [type]=\"column.filterType\" (apply)=\"onColumnFilter(column, $event)\"\n                                                           *ngIf=\"filterable\"></mona-grid-filter-menu>\n                                </div>\n                            </div>\n                            <span class=\"mona-grid-column-drop-hint\" *ngIf=\"dropColumn === column && dragColumn && reorderable\"\n                                  [ngStyle]=\"{'right': dragColumn.index < dropColumn.index ? '-1px': null, 'left': dragColumn.index > dropColumn.index ? '-1px': null}\"></span>\n                            <div monaGridColumnResizeHandler [column]=\"column\" class=\"mona-grid-column-resizer\" *ngIf=\"resizable && !columnDragging\"\n                                 (resizeStart)=\"resizing=true;\" (resizeEnd)=\"resizing=false;\"></div>\n                            <ng-template cdkDragPreview>\n                                <div class=\"mona-grid-column-drag-preview\">\n                                    <span class=\"mona-grid-column-title\">{{column.title}}</span>\n                                </div>\n                            </ng-template>\n                        </th>\n                    </tr>\n                </thead>\n            </table>\n        </div>\n    </div>\n    <ng-container *ngIf=\"(gridService.rows|gridFilter:gridService.appliedFilters:gridService.appliedSorts) as filteredData\">\n        <ng-container *ngIf=\"filteredData|gridPage:gridService.pageState.skip:gridService.pageState.take as viewData\">\n            <mona-grid-list [columns]=\"gridService.columns\" [data]=\"viewData\"></mona-grid-list>\n            <mona-pager [skip]=\"gridService.pageState.skip\" [pageSize]=\"gridService.pageState.take\" [total]=\"filteredData.length\"\n                        [pageInput]=\"true\" [pageSizeValues]=\"pageSizeValues\" (pageSizeChange)=\"onPageSizeChange($event)\"\n                        (pageChange)=\"onPageChange($event)\"></mona-pager>\n        </ng-container>\n    </ng-container>\n</div>\n", styles: [":host{position:relative;display:block;overflow:hidden}div.mona-grid{height:100%;display:flex;flex-direction:column;background:var(--mona-background-dark);border:1px solid var(--mona-border-color)}.mona-grid-group-panel{display:flex;align-items:center;padding:5px;height:40px;border-bottom:1px solid var(--mona-border-color)}.mona-grid-group-panel mona-chip{margin-right:5px}.mona-grid-group-panel-placeholder{opacity:.7}.mona-grid-header{background-color:var(--mona-background-dark);border-right:1px solid var(--mona-border-color);overflow:hidden;display:flex;flex-direction:row;flex:0 0 auto}.mona-grid-header table{border-collapse:collapse;table-layout:fixed;width:100%}.mona-grid-header table tr{position:relative}.mona-grid-header table th{white-space:nowrap;text-overflow:ellipsis;text-align:left;position:relative;-webkit-user-select:none;user-select:none}.mona-grid-header table th:not(:last-child){border-right:1px solid var(--mona-border-color)}mona-grid-list{border-top:1px solid var(--mona-border-color)}div.mona-grid-column-resizer{position:absolute;top:0;bottom:0;width:10px;background-color:transparent;cursor:col-resize;z-index:1;right:-5px}div.mona-grid-column-wrap{width:100%;height:100%;display:flex;align-items:center;justify-content:space-between;cursor:pointer}span.mona-grid-column-title{flex:1;padding:10px;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;font-weight:700}div.mona-grid-column-actions{display:flex;align-items:center;justify-content:center;padding:0 4px}span.mona-grid-column-drop-hint{position:absolute;display:flex;width:2px;height:100%;background:var(--mona-primary);z-index:1;top:0;bottom:0}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.GridService }, { type: i0.ChangeDetectorRef }, { type: i0.ElementRef }]; }, propDecorators: { cellEdit: [{
                type: Output
            }], columns: [{
                type: ContentChildren,
                args: [GridColumnComponent]
            }], data: [{
                type: Input
            }], filter: [{
                type: Input
            }], filterChange: [{
                type: Output
            }], gridHeaderElement: [{
                type: ViewChild,
                args: ["gridHeaderElement"]
            }], groupColumnList: [{
                type: ViewChild,
                args: ["groupColumnList"]
            }], groupable: [{
                type: Input
            }], pageSize: [{
                type: Input
            }], pageSizeValues: [{
                type: Input
            }], reorderable: [{
                type: Input
            }], resizable: [{
                type: Input
            }], sort: [{
                type: Input
            }], sortChange: [{
                type: Output
            }], sortable: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,