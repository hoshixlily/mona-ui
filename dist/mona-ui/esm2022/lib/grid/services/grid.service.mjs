import { EventEmitter, Injectable } from "@angular/core";
import { Dictionary, Enumerable, EnumerableSet } from "@mirei/ts-collections";
import { Row } from "../models/Row";
import { Subject } from "rxjs";
import * as i0 from "@angular/core";
export class GridService {
    constructor() {
        this.cellEdit$ = new Subject();
        this.selectedRowsChange$ = new Subject();
        this.appliedFilters = new Dictionary();
        this.appliedSorts = new Dictionary();
        this.columns = [];
        this.editableOptions = { enabled: false };
        this.filterLoad$ = new Subject();
        this.groupColumns = [];
        this.gridGroupExpandState = new Dictionary();
        this.isInEditMode = false;
        this.pageState = { page: 1, skip: 0, take: 10 };
        this.rows = [];
        this.selectedKeys = new EnumerableSet();
        this.selectionKeyField = ""; // set by GridSelectableDirective
        this.selectableOptions = {
            enabled: false,
            mode: "single"
        };
        this.selectedKeysChange = new EventEmitter();
        this.selectedRows = [];
        this.sortLoad$ = new Subject();
        this.sortableOptions = {
            enabled: false,
            mode: "single",
            allowUnsort: false,
            showIndices: true
        };
    }
    loadFilters(filters) {
        const newAppliedFilters = new Dictionary();
        for (const filter of filters) {
            const filter1 = filter.filters[0];
            const filter2 = filter.filters[1];
            const column = this.columns.find(c => c.field === filter1.field);
            if (column != null) {
                newAppliedFilters.add(column.field, {
                    filter: filter,
                    filterMenuValue: {
                        value1: filter1 && "value" in filter1 ? filter1.value : undefined,
                        value2: filter2 && "value" in filter2 ? filter2.value : undefined,
                        operator1: filter1 ? filter1.operator : undefined,
                        operator2: filter2 ? filter2.operator : undefined,
                        logic: filter.logic || "and"
                    }
                });
            }
        }
        this.columns.forEach(c => (c.filtered = newAppliedFilters.containsKey(c.field)));
        this.appliedFilters = newAppliedFilters;
        this.filterLoad$.next();
    }
    loadSelectedKeys(selectedKeys) {
        this.selectedRows = [];
        this.selectedKeys = new EnumerableSet(selectedKeys);
        for (const row of this.rows) {
            const fieldData = this.selectionKeyField ? row.data[this.selectionKeyField] : row.data;
            if (fieldData == null) {
                continue;
            }
            row.selected = this.selectedKeys.contains(fieldData);
            if (row.selected) {
                this.selectedRows = [...this.selectedRows, row];
            }
        }
    }
    loadSorts(sorts) {
        const newAppliedSorts = new Dictionary();
        for (const [index, sort] of sorts.entries()) {
            const column = this.columns.find(c => c.field === sort.field);
            if (column != null) {
                newAppliedSorts.add(column.field, {
                    sort: sort
                });
                column.sortIndex = index + 1;
                column.sortDirection = sort.dir;
            }
        }
        this.appliedSorts = newAppliedSorts;
        this.sortLoad$.next();
    }
    setEditableOptions(options) {
        this.editableOptions = { ...this.editableOptions, ...options };
    }
    setRows(value) {
        this.rows = Enumerable.from(value)
            .select(r => new Row(r))
            .toArray();
    }
    setSelectableOptions(options) {
        this.selectableOptions = { ...this.selectableOptions, ...options };
    }
    setSortableOptions(options) {
        this.sortableOptions = { ...this.sortableOptions, ...options };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: GridService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: GridService }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: GridService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,