import { asapScheduler, map, Subject } from "rxjs";
import { WindowCloseEvent } from "./WindowCloseEvent";
import { PopupCloseSource } from "../../popup/models/PopupCloseEvent";
import { WindowRef } from "./WindowRef";
/**
 * @internal - used by WindowService. Do not export.
 */
export class WindowReference {
    constructor(options) {
        this.options = options;
        // public readonly popupReference: PopupRef;
        this.move$ = new Subject();
        this.resize$ = new Subject();
    }
    center() {
        const width = this.options.popupRef.overlayRef.overlayElement.offsetWidth;
        const height = this.options.popupRef.overlayRef.overlayElement.offsetHeight;
        const left = (window.innerWidth - width) / 2;
        const top = (window.innerHeight - height) / 2;
        this.options.popupRef.overlayRef.overlayElement.style.left = `${left}px`;
        this.options.popupRef.overlayRef.overlayElement.style.top = `${top}px`;
    }
    close(result) {
        const event = result instanceof WindowCloseEvent
            ? result
            : new WindowCloseEvent({ result, via: PopupCloseSource.Programmatic });
        this.options.popupRef.close(event);
    }
    move(params) {
        if (params.top) {
            this.options.popupRef.overlayRef.overlayElement.style.top = `${params.top}px`;
        }
        if (params.left) {
            this.options.popupRef.overlayRef.overlayElement.style.left = `${params.left}px`;
        }
    }
    resize(params) {
        if (params.width) {
            this.options.popupRef.overlayRef.overlayElement.style.width = `${params.width}px`;
        }
        if (params.height) {
            this.options.popupRef.overlayRef.overlayElement.style.height = `${params.height}px`;
        }
        if (params.center) {
            asapScheduler.schedule(() => this.center());
        }
    }
    get closed$() {
        return this.options.popupRef.closed.pipe(map(event => {
            if (event.type === "windowClose") {
                return event;
            }
            return new WindowCloseEvent({ event, via: event.via, type: "windowClose", result: event.result });
        }));
    }
    get component() {
        // Type of component is ComponentRef<WindowContentComponent>. It is set as any to avoid circular dependency.
        return this.popupRef.component.instance.componentRef ?? null;
    }
    get element() {
        return this.options.popupRef.overlayRef.overlayElement;
    }
    get moved$() {
        return this.move$;
    }
    get popupRef() {
        return this.options.popupRef;
    }
    get resized$() {
        return this.resize$;
    }
    get windowRef() {
        return new WindowRef(this);
    }
}
//# sourceMappingURL=data:application/json;base64,