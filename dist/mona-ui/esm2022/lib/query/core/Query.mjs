import { Enumerator } from "@mirei/ts-collections";
import { FilterUtils } from "../filter/FilterUtils";
export class Query {
    constructor(iterable) {
        this.iterable = iterable;
        this.enumerator = new QueryEnumerator(() => iterable);
    }
    *[Symbol.iterator]() {
        yield* this.iterable;
    }
    static from(iterable) {
        return new Query(iterable);
    }
    filter(filter, fieldSelector) {
        return this.enumerator.filter(filter, fieldSelector);
    }
    run() {
        return this.enumerator.toArray();
    }
    sort(descriptor, fieldSelector) {
        return this.enumerator.sort(descriptor, fieldSelector);
    }
}
export class QueryEnumerator extends Enumerator {
    constructor(iterable) {
        super(iterable);
    }
    filter(filter, fieldSelector) {
        return new QueryEnumerator(() => this.filterGenerator(filter, fieldSelector));
    }
    run() {
        return Array.from(this);
    }
    sort(descriptor, fieldSelector) {
        return new QueryEnumerator(() => this.sortGenerator(descriptor, fieldSelector));
    }
    *filterGenerator(filter, fieldSelector) {
        const predicate = filter.hasOwnProperty("field")
            ? FilterUtils.descriptorToPredicate(filter, fieldSelector)
            : FilterUtils.compositeDescriptorToPredicate(filter, fieldSelector);
        yield* this.where(predicate);
    }
    *sortGenerator(descriptor, fieldSelector) {
        let result = descriptor[0].dir === "asc"
            ? this.orderBy(d => (fieldSelector ? fieldSelector(d) : d)[descriptor[0].field], descriptor[0].sort)
            : this.orderByDescending(d => (fieldSelector ? fieldSelector(d) : d)[descriptor[0].field], descriptor[0].sort);
        for (let i = 1; i < descriptor.length; i++) {
            result =
                descriptor[i].dir === "asc"
                    ? result.thenBy(d => (fieldSelector ? fieldSelector(d) : d)[descriptor[i].field], descriptor[i].sort)
                    : result.thenByDescending(d => (fieldSelector ? fieldSelector(d) : d)[descriptor[i].field], descriptor[i].sort);
        }
        yield* result;
    }
}
//# sourceMappingURL=data:application/json;base64,