import { Component, Inject, QueryList, ViewChildren } from "@angular/core";
import { PopupInjectionToken } from "../../../../../popup/models/PopupInjectionToken";
import { ContextMenuItemComponent } from "../context-menu-item/context-menu-item.component";
import { ActiveDescendantKeyManager } from "@angular/cdk/a11y";
import { Subject } from "rxjs";
import * as i0 from "@angular/core";
import * as i1 from "../../services/context-menu.service";
import * as i2 from "@angular/common";
import * as i3 from "../context-menu-item/context-menu-item.component";
export class ContextMenuContentComponent {
    constructor(cdr, contextMenuData, contextMenuService, elementRef, renderer, zone) {
        this.cdr = cdr;
        this.contextMenuData = contextMenuData;
        this.contextMenuService = contextMenuService;
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.zone = zone;
        this.contextMenuInjectorData = { isRoot: false };
        this.activeItemIndex = -1;
        this.currentMenuItem = null;
        this.iconSpaceVisible = false;
        this.linkSpaceVisible = false;
        this.menuPopupRef = null;
        this.contextMenuItemComponents = new QueryList();
    }
    ngAfterViewInit() {
        this.keyManager = new ActiveDescendantKeyManager(this.contextMenuItemComponents)
            .withWrap()
            .skipPredicate(mi => !!mi.menuItem.disabled || !!mi.menuItem.divider);
        this.setEventListeners();
        this.focus();
        if (!this.contextMenuData.isRoot && this.contextMenuData.viaKeyboard) {
            this.keyManager.setFirstItemActive();
            this.cdr.detectChanges();
        }
    }
    ngOnDestroy() { }
    ngOnInit() {
        this.iconSpaceVisible = this.contextMenuData.menuItems.some(mi => mi.iconClass || mi.iconTemplate);
        this.linkSpaceVisible = this.contextMenuData.menuItems.some(mi => mi.subMenuItems && mi.subMenuItems.length > 0);
    }
    onListItemClick(event, menuItem) {
        if (menuItem.disabled || menuItem.divider || (menuItem.subMenuItems && menuItem.subMenuItems.length > 0)) {
            return;
        }
        menuItem.menuClick?.();
        this.contextMenuData.menuClick?.next(menuItem);
    }
    onListItemMouseEnter(event, menuItem) {
        this.currentMenuItem = menuItem;
        this.menuPopupRef?.close();
        if (this.currentMenuItem.subMenuItems && this.currentMenuItem.subMenuItems.length > 0) {
            this.create(event.target, this.currentMenuItem);
        }
    }
    create(anchor, menuItem, viaKeyboard) {
        this.contextMenuInjectorData.menuItems = menuItem.subMenuItems;
        this.contextMenuInjectorData.menuClick = this.contextMenuData.menuClick;
        this.contextMenuInjectorData.navigate = this.contextMenuData.navigate;
        const popupClasses = this.contextMenuData.popupClass
            ? Array.isArray(this.contextMenuData.popupClass)
                ? this.contextMenuData.popupClass
                : [this.contextMenuData.popupClass]
            : [];
        this.contextMenuInjectorData.popupClass = popupClasses;
        this.menuPopupRef = this.contextMenuService.open({
            anchor,
            closeOnOutsideClick: true,
            content: ContextMenuContentComponent,
            data: this.contextMenuInjectorData,
            positions: this.contextMenuService.defaultSubMenuPositions,
            popupClass: ["mona-contextmenu-content", ...popupClasses]
        });
        this.contextMenuInjectorData.parentMenuRef = this.menuPopupRef;
        this.contextMenuInjectorData.viaKeyboard = viaKeyboard;
        this.contextMenuInjectorData.subMenuClose = new Subject();
        if (this.contextMenuData.parentMenuRef) {
            const subscription = this.contextMenuData.parentMenuRef.closed.subscribe(() => {
                this.menuPopupRef?.close();
                subscription.unsubscribe();
            });
        }
        this.contextMenuInjectorData.subMenuClose.subscribe(() => {
            this.focus();
        });
    }
    focus() {
        const listElement = this.elementRef.nativeElement.querySelector("ul:first-child");
        listElement?.focus();
    }
    setEventListeners() {
        this.zone.runOutsideAngular(() => {
            this.renderer.listen(this.elementRef.nativeElement, "keydown", (event) => {
                this.activeItemIndex = this.keyManager.activeItemIndex ?? -1;
                switch (event.key) {
                    case "ArrowDown":
                    case "ArrowUp":
                        this.zone.run(() => {
                            const previousItem = this.keyManager.activeItem;
                            this.keyManager.onKeydown(event);
                            if (this.keyManager.activeItem !== previousItem) {
                                this.contextMenuData.navigate.emit({
                                    previousItem: previousItem?.menuItem ?? null,
                                    currentItem: this.keyManager.activeItem?.menuItem ?? null,
                                    direction: event.key === "ArrowDown" ? "down" : "up"
                                });
                            }
                        });
                        break;
                    case "Enter":
                    case " ":
                        if (this.keyManager.activeItem?.menuItem) {
                            if (this.keyManager.activeItem.menuItem.subMenuItems &&
                                this.keyManager.activeItem.menuItem.subMenuItems.length > 0) {
                                return;
                            }
                            this.zone.run(() => {
                                if (this.keyManager.activeItem) {
                                    this.keyManager.activeItem.menuItem.menuClick?.();
                                    this.contextMenuData.menuClick?.next(this.keyManager.activeItem.menuItem);
                                }
                            });
                        }
                        break;
                    case "ArrowRight":
                        if (this.keyManager.activeItem?.menuItem &&
                            this.keyManager.activeItem.menuItem.subMenuItems &&
                            this.keyManager.activeItem.menuItem.subMenuItems.length > 0) {
                            this.zone.run(() => {
                                this.menuPopupRef?.close();
                                const previousItem = this.keyManager.activeItem;
                                if (this.keyManager.activeItem) {
                                    this.create(this.keyManager.activeItem.elementRef.nativeElement, this.keyManager.activeItem.menuItem, true);
                                }
                                this.contextMenuData.navigate.emit({
                                    previousItem: previousItem?.menuItem ?? null,
                                    currentItem: this.keyManager.activeItem?.menuItem.subMenuItems?.find(mi => !mi.disabled && !mi.divider) ?? null,
                                    direction: "right"
                                });
                            });
                        }
                        else {
                            this.zone.run(() => {
                                this.contextMenuData.navigate.emit({
                                    previousItem: this.keyManager.activeItem?.menuItem ?? null,
                                    currentItem: null,
                                    direction: "right"
                                });
                            });
                        }
                        break;
                    case "ArrowLeft":
                        this.zone.run(() => {
                            if (!this.contextMenuData.isRoot) {
                                this.contextMenuData.parentMenuRef?.close();
                                this.contextMenuData.subMenuClose?.next();
                                this.contextMenuData.navigate.emit({
                                    previousItem: this.keyManager.activeItem?.menuItem ?? null,
                                    currentItem: this.keyManager.activeItem?.menuItem.parent ?? null,
                                    direction: "left"
                                });
                            }
                            else {
                                this.contextMenuData.navigate.emit({
                                    previousItem: this.keyManager.activeItem?.menuItem ?? null,
                                    currentItem: null,
                                    direction: "left"
                                });
                            }
                        });
                        break;
                }
            });
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: ContextMenuContentComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: PopupInjectionToken }, { token: i1.ContextMenuService }, { token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.0.0", type: ContextMenuContentComponent, selector: "mona-contextmenu-content", viewQueries: [{ propertyName: "contextMenuItemComponents", predicate: ContextMenuItemComponent, descendants: true }], ngImport: i0, template: "<ul class=\"mona-contextmenu-list\" tabindex=\"0\">\n    <ng-container *ngFor=\"let menuItem of contextMenuData.menuItems; let mx = index;\">\n        <li class=\"mona-contextmenu-list-item\"\n            [ngClass]=\"{'mona-disabled': menuItem.disabled, 'divider': menuItem.divider, 'mona-focused': keyManager?.activeItem?.menuItem === menuItem}\"\n            (mouseenter)=\"onListItemMouseEnter($event, menuItem)\"\n            (click)=\"onListItemClick($event, menuItem)\" *ngIf=\"menuItem.visible\">\n            <mona-contextmenu-item [menuItem]=\"menuItem\" [iconSpaceVisible]=\"iconSpaceVisible\" [linkSpaceVisible]=\"linkSpaceVisible\"\n                                   [submenuPopupRef]=\"menuPopupRef\" [attr.tabindex]=\"0\" *ngIf=\"menuItem.visible\"></mona-contextmenu-item>\n        </li>\n    </ng-container>\n</ul>\n", styles: [":host{width:100%}ul{width:100%;list-style:none;outline:none}ul li{height:calc(var(--mona-input-height) - 4px)}ul li.divider{height:auto;pointer-events:none}\n"], dependencies: [{ kind: "directive", type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i3.ContextMenuItemComponent, selector: "mona-contextmenu-item", inputs: ["iconSpaceVisible", "linkSpaceVisible", "menuItem", "submenuPopupRef"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: ContextMenuContentComponent, decorators: [{
            type: Component,
            args: [{ selector: "mona-contextmenu-content", template: "<ul class=\"mona-contextmenu-list\" tabindex=\"0\">\n    <ng-container *ngFor=\"let menuItem of contextMenuData.menuItems; let mx = index;\">\n        <li class=\"mona-contextmenu-list-item\"\n            [ngClass]=\"{'mona-disabled': menuItem.disabled, 'divider': menuItem.divider, 'mona-focused': keyManager?.activeItem?.menuItem === menuItem}\"\n            (mouseenter)=\"onListItemMouseEnter($event, menuItem)\"\n            (click)=\"onListItemClick($event, menuItem)\" *ngIf=\"menuItem.visible\">\n            <mona-contextmenu-item [menuItem]=\"menuItem\" [iconSpaceVisible]=\"iconSpaceVisible\" [linkSpaceVisible]=\"linkSpaceVisible\"\n                                   [submenuPopupRef]=\"menuPopupRef\" [attr.tabindex]=\"0\" *ngIf=\"menuItem.visible\"></mona-contextmenu-item>\n        </li>\n    </ng-container>\n</ul>\n", styles: [":host{width:100%}ul{width:100%;list-style:none;outline:none}ul li{height:calc(var(--mona-input-height) - 4px)}ul li.divider{height:auto;pointer-events:none}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [PopupInjectionToken]
                }] }, { type: i1.ContextMenuService }, { type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i0.NgZone }]; }, propDecorators: { contextMenuItemComponents: [{
                type: ViewChildren,
                args: [ContextMenuItemComponent]
            }] } });
//# sourceMappingURL=data:application/json;base64,