import { Component, EventEmitter, Input, Output } from "@angular/core";
import { faCaretRight, faChevronDown, faChevronRight } from "@fortawesome/free-solid-svg-icons";
import { NodeClickEvent } from "../../data/NodeClickEvent";
import { of, Subject, switchMap, takeUntil } from "rxjs";
import * as i0 from "@angular/core";
import * as i1 from "../../services/tree-view.service";
import * as i2 from "@angular/common";
import * as i3 from "@fortawesome/angular-fontawesome";
import * as i4 from "../../../inputs/modules/check-box/directives/check-box.directive";
import * as i5 from "@angular/forms";
export class TreeViewNodeComponent {
    constructor(elementRef, treeViewService) {
        this.elementRef = elementRef;
        this.treeViewService = treeViewService;
        this.componentDestroy$ = new Subject();
        this.click$ = new Subject();
        this.collapseIcon = faChevronDown;
        this.dropMagnetIcon = faCaretRight;
        this.expandIcon = faChevronRight;
        this.dropMagnetVisible = false;
        this.dragging = false;
        this.dropPositionChange = new EventEmitter();
        this.nodeClick = new EventEmitter();
        this.nodeDoubleClick = new EventEmitter();
        this.nodeSelect = new EventEmitter();
        this.nodeTextTemplate = null;
    }
    ngOnDestroy() {
        this.componentDestroy$.next();
        this.componentDestroy$.complete();
    }
    ngOnInit() {
        this.setSubscriptions();
    }
    onCheckToggle(checked) {
        this.treeViewService.toggleNodeCheck(this.node, checked);
    }
    onExpandToggle(event) {
        this.treeViewService.toggleNodeExpand(this.node);
    }
    onMouseEnter(event) {
        if (!this.dragging) {
            return;
        }
        this.dropMagnetVisible = true;
    }
    onMouseLeave(event) {
        this.dropMagnetVisible = false;
        this.dropPosition = undefined;
        if (!this.dragging) {
            return;
        }
    }
    onMouseMove(event) {
        if (!this.dragging) {
            return;
        }
        const rect = this.elementRef.nativeElement.getBoundingClientRect();
        let node;
        if (event.clientY > rect.top && event.clientY - rect.top <= 5) {
            this.dropPosition = "before";
            node = this.node;
        }
        else if (event.clientY < rect.bottom && rect.bottom - event.clientY <= 5) {
            this.dropPosition = "after";
            node = this.node;
        }
        else if (event.clientY <= rect.top || event.clientY >= rect.bottom) {
            this.dropPosition = undefined;
            node = undefined;
        }
        else {
            this.dropPosition = "inside";
            node = this.node;
        }
        if (this.dropPosition) {
            this.dropPositionChange.emit({
                position: this.dropPosition,
                node
            });
        }
    }
    onNodeDoubleClick(event) {
        if (this.node.disabled) {
            return;
        }
        const clickEvent = new NodeClickEvent(this.node.getLookupItem(), event, "dblclick");
        this.nodeDoubleClick.emit(clickEvent);
    }
    onNodeClick(event, type) {
        if (this.node.disabled) {
            return;
        }
        const clickEvent = new NodeClickEvent(this.node.getLookupItem(), event, type);
        this.nodeClick.emit(clickEvent);
        if (clickEvent.isDefaultPrevented()) {
            return;
        }
        if (event.type === "click") {
            this.treeViewService.toggleNodeSelection(this.node);
            this.nodeSelect.emit(this.node);
        }
    }
    setActiveStyles() {
        this.node.focused = true;
    }
    setInactiveStyles() {
        this.node.focused = false;
    }
    setSubscriptions() {
        this.click$
            .pipe(takeUntil(this.componentDestroy$), 
        // debounceTime(350),
        switchMap(event => of({ event, type: event.type })))
            .subscribe(result => {
            if (result.type === "dblclick") {
                this.onNodeDoubleClick(result.event);
            }
            else {
                this.onNodeClick(result.event, "click");
            }
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: TreeViewNodeComponent, deps: [{ token: i0.ElementRef }, { token: i1.TreeViewService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.0.0", type: TreeViewNodeComponent, selector: "mona-tree-view-node", inputs: { dragging: "dragging", node: "node", nodeTextTemplate: "nodeTextTemplate" }, outputs: { dropPositionChange: "dropPositionChange", nodeClick: "nodeClick", nodeDoubleClick: "nodeDoubleClick", nodeSelect: "nodeSelect" }, ngImport: i0, template: "<div class=\"mona-tree-view-node\"\n     (mouseenter)=\"onMouseEnter($event)\" (mouseleave)=\"onMouseLeave($event)\" (mousemove)=\"onMouseMove($event)\">\n    <div class=\"mona-tree-view-drop-magnet\" *ngIf=\"dragging && dropMagnetVisible && dropPosition==='before'\" [attr.data-nid]=\"node.uid\" [attr.data-pos]=\"'before'\">\n        <fa-icon [icon]=\"dropMagnetIcon\"></fa-icon>\n        <div></div>\n    </div>\n    <div class=\"mona-tree-node-expander\" (click)=\"onExpandToggle($event)\" [ngClass]=\"{'mona-interactive': node.nodes.length !== 0, 'mona-disabled': node.disabled}\">\n        <fa-icon [icon]=\"expandIcon\" *ngIf=\"node.nodes.length !== 0 && !node.expanded\"></fa-icon>\n        <fa-icon [icon]=\"collapseIcon\" *ngIf=\"node.nodes.length !== 0 && node.expanded\"></fa-icon>\n    </div>\n    <div class=\"mona-tree-node-content\"  [ngClass]=\"{'mona-disabled': node.disabled}\">\n        <input type=\"checkbox\" id=\"mona-tree-node-checkbox-{{node.uid}}\" [indeterminate]=\"node.indeterminate\" [disabled]=\"node.disabled\"\n               [ngModel]=\"node.checked\" (ngModelChange)=\"onCheckToggle($event)\" monaCheckBox *ngIf=\"treeViewService.checkableOptions.enabled\">\n        <label for=\"mona-tree-node-checkbox-{{node.uid}}\"></label>\n        <div class=\"mona-tree-view-node-text\" [ngClass]=\"{'mona-tree-view-node-selected': node.selected, 'mona-tree-view-node-dropping': dragging && dropPosition==='inside', 'mona-tree-view-node-focused': node.focused}\"\n             (click)=\"click$.next($event)\"\n             (dblclick)=\"click$.next($event)\"\n             (contextmenu)=\"onNodeClick($event, 'contextmenu')\">\n            <ng-container *ngIf=\"!nodeTextTemplate\">{{node.text}}</ng-container>\n            <ng-container [ngTemplateOutlet]=\"nodeTextTemplate\" [ngTemplateOutletContext]=\"{$implicit: node.data, node: node}\" *ngIf=\"!!nodeTextTemplate\"></ng-container>\n        </div>\n    </div>\n    <div class=\"mona-tree-view-drop-magnet\" *ngIf=\"dragging && dropMagnetVisible && dropPosition==='after'\" [attr.data-nid]=\"node.uid\"[attr.data-pos]=\"'after'\">\n        <fa-icon [icon]=\"dropMagnetIcon\"></fa-icon>\n        <div></div>\n    </div>\n</div>\n", styles: [":host{position:relative}.mona-tree-view-node{display:flex;height:var(--mona-input-height);position:relative}div.mona-tree-node-expander{height:100%;width:16px;display:flex;align-items:center;justify-content:flex-start;color:var(--mona-text);-webkit-user-select:none;user-select:none;cursor:default;pointer-events:none}div.mona-tree-node-expander.mona-interactive{cursor:pointer;pointer-events:auto}div.mona-tree-node-content{flex:1;display:flex;align-items:center;justify-content:flex-start;min-width:0;-webkit-user-select:none;user-select:none}div.mona-tree-view-node-text{color:var(--mona-text);padding:5px;min-width:0;-webkit-user-select:none;user-select:none;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}div.mona-tree-view-drop-magnet{position:absolute;width:100%;height:4px;display:flex;align-items:center;justify-content:flex-start}div.mona-tree-view-drop-magnet>fa-icon{color:var(--mona-primary)}div.mona-tree-view-drop-magnet>div{width:10%;height:2px;margin-left:5px;background-color:var(--mona-primary)}div.mona-tree-view-drop-magnet:first-child{top:2px}div.mona-tree-view-drop-magnet:last-child{bottom:2px}\n"], dependencies: [{ kind: "directive", type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "component", type: i3.FaIconComponent, selector: "fa-icon", inputs: ["icon", "title", "spin", "pulse", "mask", "styles", "flip", "size", "pull", "border", "inverse", "symbol", "rotate", "fixedWidth", "classes", "transform", "a11yRole"] }, { kind: "directive", type: i4.CheckBoxDirective, selector: "input[type='checkbox'][monaCheckBox]" }, { kind: "directive", type: i5.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { kind: "directive", type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i5.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: TreeViewNodeComponent, decorators: [{
            type: Component,
            args: [{ selector: "mona-tree-view-node", template: "<div class=\"mona-tree-view-node\"\n     (mouseenter)=\"onMouseEnter($event)\" (mouseleave)=\"onMouseLeave($event)\" (mousemove)=\"onMouseMove($event)\">\n    <div class=\"mona-tree-view-drop-magnet\" *ngIf=\"dragging && dropMagnetVisible && dropPosition==='before'\" [attr.data-nid]=\"node.uid\" [attr.data-pos]=\"'before'\">\n        <fa-icon [icon]=\"dropMagnetIcon\"></fa-icon>\n        <div></div>\n    </div>\n    <div class=\"mona-tree-node-expander\" (click)=\"onExpandToggle($event)\" [ngClass]=\"{'mona-interactive': node.nodes.length !== 0, 'mona-disabled': node.disabled}\">\n        <fa-icon [icon]=\"expandIcon\" *ngIf=\"node.nodes.length !== 0 && !node.expanded\"></fa-icon>\n        <fa-icon [icon]=\"collapseIcon\" *ngIf=\"node.nodes.length !== 0 && node.expanded\"></fa-icon>\n    </div>\n    <div class=\"mona-tree-node-content\"  [ngClass]=\"{'mona-disabled': node.disabled}\">\n        <input type=\"checkbox\" id=\"mona-tree-node-checkbox-{{node.uid}}\" [indeterminate]=\"node.indeterminate\" [disabled]=\"node.disabled\"\n               [ngModel]=\"node.checked\" (ngModelChange)=\"onCheckToggle($event)\" monaCheckBox *ngIf=\"treeViewService.checkableOptions.enabled\">\n        <label for=\"mona-tree-node-checkbox-{{node.uid}}\"></label>\n        <div class=\"mona-tree-view-node-text\" [ngClass]=\"{'mona-tree-view-node-selected': node.selected, 'mona-tree-view-node-dropping': dragging && dropPosition==='inside', 'mona-tree-view-node-focused': node.focused}\"\n             (click)=\"click$.next($event)\"\n             (dblclick)=\"click$.next($event)\"\n             (contextmenu)=\"onNodeClick($event, 'contextmenu')\">\n            <ng-container *ngIf=\"!nodeTextTemplate\">{{node.text}}</ng-container>\n            <ng-container [ngTemplateOutlet]=\"nodeTextTemplate\" [ngTemplateOutletContext]=\"{$implicit: node.data, node: node}\" *ngIf=\"!!nodeTextTemplate\"></ng-container>\n        </div>\n    </div>\n    <div class=\"mona-tree-view-drop-magnet\" *ngIf=\"dragging && dropMagnetVisible && dropPosition==='after'\" [attr.data-nid]=\"node.uid\"[attr.data-pos]=\"'after'\">\n        <fa-icon [icon]=\"dropMagnetIcon\"></fa-icon>\n        <div></div>\n    </div>\n</div>\n", styles: [":host{position:relative}.mona-tree-view-node{display:flex;height:var(--mona-input-height);position:relative}div.mona-tree-node-expander{height:100%;width:16px;display:flex;align-items:center;justify-content:flex-start;color:var(--mona-text);-webkit-user-select:none;user-select:none;cursor:default;pointer-events:none}div.mona-tree-node-expander.mona-interactive{cursor:pointer;pointer-events:auto}div.mona-tree-node-content{flex:1;display:flex;align-items:center;justify-content:flex-start;min-width:0;-webkit-user-select:none;user-select:none}div.mona-tree-view-node-text{color:var(--mona-text);padding:5px;min-width:0;-webkit-user-select:none;user-select:none;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}div.mona-tree-view-drop-magnet{position:absolute;width:100%;height:4px;display:flex;align-items:center;justify-content:flex-start}div.mona-tree-view-drop-magnet>fa-icon{color:var(--mona-primary)}div.mona-tree-view-drop-magnet>div{width:10%;height:2px;margin-left:5px;background-color:var(--mona-primary)}div.mona-tree-view-drop-magnet:first-child{top:2px}div.mona-tree-view-drop-magnet:last-child{bottom:2px}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.TreeViewService }]; }, propDecorators: { dragging: [{
                type: Input
            }], dropPositionChange: [{
                type: Output
            }], node: [{
                type: Input
            }], nodeClick: [{
                type: Output
            }], nodeDoubleClick: [{
                type: Output
            }], nodeSelect: [{
                type: Output
            }], nodeTextTemplate: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,