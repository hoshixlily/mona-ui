import { EventEmitter, Injectable } from "@angular/core";
import { Dictionary, EnumerableSet, SortedSet } from "@mirei/ts-collections";
import * as i0 from "@angular/core";
export class TreeViewService {
    constructor() {
        this.checkableOptions = {
            checkChildren: true,
            mode: "multiple",
            checkParents: true,
            enabled: false
        };
        this.checkedKeys = new EnumerableSet();
        this.checkedKeysChange = new EventEmitter();
        this.disabledKeys = new EnumerableSet();
        this.expandedKeys = new EnumerableSet();
        this.expandedKeysChange = new EventEmitter();
        this.nodeDictionary = new Dictionary();
        this.nodeList = [];
        this.selectableOptions = {
            childrenOnly: false,
            enabled: false,
            mode: "single"
        };
        this.selectedKeys = new EnumerableSet();
        this.selectedKeysChange = new EventEmitter();
        this.viewNodeList = [];
    }
    static getNodeDisablerAction(disabler) {
        if (typeof disabler === "string") {
            return (item) => !!item?.[disabler] ?? false;
        }
        return disabler;
    }
    loadCheckedKeys(checkedKeys) {
        const checkedKeySet = new SortedSet(checkedKeys);
        for (const [uid, node] of this.nodeDictionary.entries()) {
            node.checked = checkedKeySet.contains(node.key);
        }
        for (const node of this.nodeDictionary.values()) {
            if (node.nodes.length > 0) {
                if (this.checkableOptions.checkChildren && checkedKeySet.contains(node.key)) {
                    node.check({ checked: true, checkChildren: true, checkParent: false });
                }
                if (this.checkableOptions.checkParents) {
                    node.indeterminate =
                        !node.checked && node.nodes.some(childNode => childNode.checked || childNode.indeterminate);
                }
            }
        }
    }
    loadDisabledKeys(disabledKeys) {
        const disabledKeySet = new SortedSet(disabledKeys);
        const disable = (node, disabled) => {
            node.disabled = disabled ?? disabledKeySet.contains(node.key);
            if (!node.disabled && disabled == null) {
                node.nodes.forEach(childNode => disable(childNode));
            }
            else if (!node.disabled) {
                node.nodes.forEach(childNode => disable(childNode, false));
            }
            else {
                node.nodes.forEach(childNode => disable(childNode, true));
            }
        };
        for (const node of this.nodeList) {
            disable(node);
        }
    }
    loadExpandedKeys(expandedKeys) {
        const expandedKeySet = new SortedSet(expandedKeys);
        for (const key of expandedKeySet) {
            const node = this.nodeDictionary.firstOrDefault(n => n.value.key === key)?.value;
            if (node) {
                node.expand(true);
            }
        }
    }
    loadSelectedKeys(selectedKeys) {
        const selectedKeySet = new SortedSet(selectedKeys);
        for (const key of selectedKeySet) {
            const node = this.nodeDictionary.firstOrDefault(n => n.value.key === key)?.value;
            if (node) {
                node.setSelected(true);
            }
        }
    }
    setCheckableOptions(options) {
        this.checkableOptions = { ...this.checkableOptions, ...options };
    }
    setSelectableOptions(options) {
        this.selectableOptions = { ...this.selectableOptions, ...options };
    }
    toggleNodeCheck(node, checked) {
        if (node.disabled) {
            return;
        }
        if (this.checkableOptions?.mode === "single") {
            this.uncheckAllNodes();
        }
        node.check({
            checked: checked ?? !node.checked,
            checkChildren: this.checkableOptions?.checkChildren,
            checkParent: this.checkableOptions?.checkParents
        });
        const checkedKeys = this.nodeDictionary
            .where(n => n.value.checked)
            .select(n => n.value.key)
            .toArray();
        this.checkedKeysChange.emit(checkedKeys);
    }
    toggleNodeExpand(node, expand) {
        if (node.nodes.length === 0) {
            return;
        }
        node.expand(expand ?? !node.expanded, false);
        const expandedKeys = this.nodeDictionary
            .where(n => n.value.expanded)
            .select(n => n.value.key)
            .toArray();
        this.expandedKeysChange.emit(expandedKeys);
    }
    toggleNodeSelection(node) {
        if (!this.selectableOptions.enabled) {
            return;
        }
        if (this.selectableOptions.childrenOnly && node.nodes.length > 0) {
            return;
        }
        if (node.disabled) {
            return;
        }
        if (node.selected) {
            node.setSelected(false);
            this.lastSelectedNode = undefined;
        }
        else {
            if (this.selectableOptions.mode === "single") {
                if (this.lastSelectedNode) {
                    this.lastSelectedNode.setSelected(false);
                }
            }
            node.setSelected(true);
            node.focused = true;
            this.lastSelectedNode = node;
        }
        const selectedKeys = this.nodeDictionary
            .where(n => n.value.selected)
            .select(n => n.value.key)
            .toArray();
        this.selectedKeysChange.emit(selectedKeys);
    }
    uncheckAllNodes() {
        this.nodeList.forEach(node => node.check({ checked: false, checkChildren: true, checkParent: true }));
    }
    updateNodeCheckStatus(node) {
        if (node.nodes.length > 0) {
            const allChecked = node.nodes.every(childNode => childNode.checked);
            const someChecked = node.nodes.some(childNode => childNode.checked);
            const someIndeterminate = node.nodes.some(childNode => childNode.indeterminate);
            node.checked = allChecked;
            node.indeterminate = someIndeterminate || (!allChecked && someChecked);
        }
        else {
            node.indeterminate = false;
        }
        let parent = node.parent;
        while (parent) {
            const allChecked = parent.nodes.every(childNode => childNode.checked);
            const someChecked = parent.nodes.some(childNode => childNode.checked);
            const someIndeterminate = parent.nodes.some(childNode => childNode.indeterminate);
            parent.checked = allChecked;
            parent.indeterminate = someIndeterminate || (!allChecked && someChecked);
            parent = parent.parent;
        }
        const checkedKeys = this.nodeDictionary
            .where(n => n.value.checked)
            .select(n => n.value.key)
            .toArray();
        this.checkedKeysChange.emit(checkedKeys);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: TreeViewService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: TreeViewService }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: TreeViewService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,