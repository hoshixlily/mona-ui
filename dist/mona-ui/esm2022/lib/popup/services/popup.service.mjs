import { Injectable, Injector, TemplateRef } from "@angular/core";
import { ComponentPortal, TemplatePortal } from "@angular/cdk/portal";
import { PopupRef } from "../models/PopupRef";
import { PopupInjectionToken } from "../models/PopupInjectionToken";
import { DefaultPositions } from "../models/DefaultPositions";
import { fromEvent, Subject, take, takeUntil } from "rxjs";
import { PopupCloseEvent, PopupCloseSource } from "../models/PopupCloseEvent";
import { Dictionary } from "@mirei/ts-collections";
import { v4 } from "uuid";
import { PopupReference } from "../models/PopupReference";
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/overlay";
export class PopupService {
    constructor(injector, overlay, rendererFactory, zone) {
        this.injector = injector;
        this.overlay = overlay;
        this.rendererFactory = rendererFactory;
        this.zone = zone;
        this.outsideEventsToClose = ["click", "mousedown", "dblclick", "contextmenu", "auxclick"];
        this.popupStateMap = new Dictionary();
        this.serviceDestroy$ = new Subject();
        this.renderer = rendererFactory.createRenderer(null, null);
    }
    create(settings) {
        const uid = v4();
        let positionStrategy;
        if (settings.positionStrategy === "global") {
            positionStrategy = this.overlay.position().global();
        }
        else {
            positionStrategy = this.overlay
                .position()
                .flexibleConnectedTo(settings.anchor)
                .withPositions(settings.positions ?? DefaultPositions)
                .withDefaultOffsetX(settings.offset?.horizontal ?? 0)
                .withDefaultOffsetY(settings.offset?.vertical ?? 0)
                .withPush(settings.withPush ?? true);
        }
        const panelClass = settings.popupClass
            ? ["mona-popup-content"].concat(settings.popupClass)
            : "mona-popup-content";
        const overlayRef = this.overlay.create({
            positionStrategy,
            hasBackdrop: settings.hasBackdrop ?? true,
            height: settings.height,
            maxHeight: settings.maxHeight,
            maxWidth: settings.maxWidth,
            minHeight: settings.minHeight,
            minWidth: settings.minWidth,
            width: settings.width,
            panelClass,
            backdropClass: settings.backdropClass ?? "transparent"
        });
        const preventClose = settings.preventClose;
        const popupReference = new PopupReference(overlayRef);
        const injector = Injector.create({
            parent: this.injector,
            providers: [
                { provide: PopupRef, useFactory: () => popupReference.popupRef },
                { provide: PopupInjectionToken, useValue: settings.data },
                ...(settings.providers ?? [])
            ]
        });
        let portal;
        if (settings.content instanceof TemplateRef) {
            portal = new TemplatePortal(settings.content, PopupService.popupAnchorDirective.viewContainerRef, null, injector);
            overlayRef.attach(portal);
        }
        else {
            portal = new ComponentPortal(settings.content, PopupService.popupAnchorDirective.viewContainerRef, injector);
            popupReference.componentRef = overlayRef.attach(portal);
        }
        if (settings.hasBackdrop) {
            if (settings.closeOnBackdropClick ?? true) {
                const backdropSubject = new Subject();
                const subscription = overlayRef
                    .backdropClick()
                    .pipe(takeUntil(backdropSubject))
                    .subscribe(e => {
                    const event = new PopupCloseEvent({ event: e, via: PopupCloseSource.BackdropClick });
                    const prevented = preventClose ? preventClose(event) || event.isDefaultPrevented() : false;
                    if (!prevented) {
                        popupReference.close(event);
                        this.popupStateMap.remove(uid);
                        backdropSubject.next();
                        backdropSubject.complete();
                    }
                });
                popupReference.closed.pipe(take(1)).subscribe(() => subscription.unsubscribe());
            }
        }
        else {
            if (settings.closeOnOutsideClick ?? true) {
                const subscription = overlayRef
                    .outsidePointerEvents()
                    .pipe(takeUntil(this.serviceDestroy$))
                    .subscribe(event => {
                    if (this.outsideEventsToClose.includes(event.type)) {
                        const closeEvent = new PopupCloseEvent({ event, via: PopupCloseSource.OutsideClick });
                        const prevented = preventClose
                            ? preventClose(closeEvent) || closeEvent.isDefaultPrevented()
                            : false;
                        if (!prevented) {
                            popupReference.close(closeEvent);
                            this.popupStateMap.remove(uid);
                            subscription.unsubscribe();
                        }
                    }
                });
                popupReference.closed.pipe(take(1)).subscribe(() => subscription.unsubscribe());
            }
        }
        popupReference.closed.pipe(take(1)).subscribe(() => {
            this.popupStateMap.remove(uid);
        });
        this.popupStateMap.add(uid, {
            uid,
            popupRef: popupReference.popupRef,
            settings
        });
        this.setEventListeners(this.popupStateMap.get(uid));
        return popupReference.popupRef;
    }
    ngOnDestroy() {
        this.serviceDestroy$.next();
        this.serviceDestroy$.complete();
    }
    setEventListeners(state) {
        this.zone.runOutsideAngular(() => {
            if (state.settings.closeOnEscape ?? true) {
                fromEvent(document, "keydown")
                    .pipe(takeUntil(state.popupRef.closed))
                    .subscribe(event => {
                    if (event.key === "Escape") {
                        const closeEvent = new PopupCloseEvent({ event, via: PopupCloseSource.Escape });
                        const prevented = state.settings.preventClose
                            ? state.settings.preventClose(closeEvent) || closeEvent.isDefaultPrevented()
                            : false;
                        if (!prevented) {
                            this.zone.run(() => {
                                state.popupRef.close(closeEvent);
                                this.popupStateMap.remove(state.uid);
                            });
                        }
                    }
                });
            }
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: PopupService, deps: [{ token: i0.Injector }, { token: i1.Overlay }, { token: i0.RendererFactory2 }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: PopupService, providedIn: "root" }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: PopupService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: "root"
                }]
        }], ctorParameters: function () { return [{ type: i0.Injector }, { type: i1.Overlay }, { type: i0.RendererFactory2 }, { type: i0.NgZone }]; } });
//# sourceMappingURL=data:application/json;base64,