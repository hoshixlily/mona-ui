import { Injectable } from "@angular/core";
import { Enumerable, Group, List } from "@mirei/ts-collections";
import { PopupListItem } from "../data/PopupListItem";
import { Subject } from "rxjs";
import * as i0 from "@angular/core";
export class PopupListService {
    constructor() {
        this.scrollToListItem$ = new Subject();
        this.filterModeActive = false;
        this.sourceListData = new List();
        this.viewListData = new List();
    }
    static findFirstSelectedItem(items) {
        return items.selectMany(g => g.source).firstOrDefault(i => i.selected);
    }
    static findLastSelectedItem(items) {
        return items.selectMany(g => g.source).lastOrDefault(i => i.selected);
    }
    static findNextSelectableItem(items, item) {
        return (items
            .selectMany(g => g.source)
            .skipWhile(i => !i.dataEquals(item.data))
            .skip(1)
            .firstOrDefault(i => !i.disabled) ?? null);
    }
    static findPreviousSelectableItem(items, item) {
        return (items
            .selectMany(g => g.source)
            .reverse()
            .skipWhile(i => !i.dataEquals(item.data))
            .skip(1)
            .firstOrDefault(i => !i.disabled) ?? null);
    }
    static getItemDisablerAction(disabler) {
        if (typeof disabler === "string") {
            return (item) => !!item?.[disabler] ?? false;
        }
        return disabler;
    }
    static isFirstSelectableItem(items, item) {
        return PopupListService.findPreviousSelectableItem(items, item) === null;
    }
    static isLastSelectableItem(items, item) {
        return PopupListService.findNextSelectableItem(items, item) === null;
    }
    clearFilters() {
        this.viewListData = this.sourceListData.toList();
        this.viewListData.selectMany(g => g.source).forEach(i => (i.highlighted = false));
        this.filterModeActive = false;
    }
    filterItems(filter, selectionMode) {
        if (!filter) {
            this.clearFilters();
            return;
        }
        this.viewListData = this.sourceListData
            .select(g => {
            const filteredItems = g.source.where(i => i.text.toLowerCase().includes(filter.toLowerCase()));
            return new Group(g.key, filteredItems.toList());
        })
            .toList();
        if (selectionMode === "single") {
            const selectedItem = this.viewListData
                .selectMany(g => g.source)
                .where(i => i.selected)
                .firstOrDefault();
            if (selectedItem) {
                selectedItem.highlighted = true;
            }
            else {
                const firstItem = this.viewListData
                    .selectMany(g => g.source)
                    .where(i => !i.disabled)
                    .firstOrDefault();
                if (firstItem) {
                    firstItem.highlighted = true;
                }
            }
        }
        else {
            this.viewListData.selectMany(g => g.source).forEach(i => (i.highlighted = false));
            const firstItem = this.viewListData
                .selectMany(g => g.source)
                .where(i => !i.disabled)
                .firstOrDefault();
            if (firstItem) {
                firstItem.highlighted = true;
            }
        }
        this.filterModeActive = true;
    }
    getListItemsOfValues(values) {
        const popupListItems = [];
        values.forEach(v => {
            const item = this.sourceListData.selectMany(g => g.source).firstOrDefault(i => i.dataEquals(v));
            if (item) {
                popupListItems.push(item);
            }
        });
        return popupListItems;
    }
    initializeListData(params) {
        let listItems = new List();
        const createListItem = (item) => {
            return new PopupListItem({
                data: item,
                text: params.textField ? item[params.textField] : item,
                textField: params.textField,
                value: params.valueField ? item[params.valueField] : item,
                valueField: params.valueField
            });
        };
        if (params.groupField) {
            listItems = Enumerable.from(params.data)
                .groupBy(d => d[params.groupField])
                .select(g => new Group(g.key, g.select(d => createListItem(d)).toList()))
                .orderBy(g => g.key)
                .toList();
        }
        else {
            const items = Enumerable.from(params.data)
                .select(d => createListItem(d))
                .toList();
            listItems.add(new Group("", items));
        }
        const selectedItems = this.sourceListData
            .selectMany(g => g.source)
            .where(i => i.selected)
            .toList();
        this.sourceListData = listItems;
        this.viewListData = this.sourceListData.toList();
        this.sourceListData
            .selectMany(g => g.source)
            .forEach(i => {
            i.selected = selectedItems.any(s => s.dataEquals(i.data));
        });
        if (params.disabler) {
            const disablerAction = PopupListService.getItemDisablerAction(params.disabler);
            this.updateDisabledItems(disablerAction);
        }
        return listItems;
    }
    navigate(event, selectionMode) {
        const selectedItem = this.viewListData.selectMany(g => g.source).firstOrDefault(i => i.selected);
        const highlightedItem = this.viewListData.selectMany(g => g.source).firstOrDefault(i => i.highlighted);
        const firstItem = this.viewListData.selectMany(g => g.source).firstOrDefault(i => !i.disabled);
        const focusedItem = highlightedItem ?? selectedItem ?? null;
        let newItem = null;
        if (event.key === "ArrowDown") {
            event.preventDefault();
            if (focusedItem && PopupListService.isLastSelectableItem(this.viewListData, focusedItem)) {
                if (this.filterModeActive && focusedItem.highlighted && !focusedItem.selected) {
                    focusedItem.highlighted = false;
                    focusedItem.selected = true;
                }
                return focusedItem;
            }
            const nextItem = !focusedItem
                ? firstItem
                : PopupListService.findNextSelectableItem(this.viewListData, focusedItem);
            if (nextItem) {
                if (selectionMode === "single") {
                    if (this.filterModeActive) {
                        if (focusedItem && focusedItem.highlighted && !focusedItem.selected) {
                            focusedItem.highlighted = false;
                            focusedItem.selected = true;
                            newItem = focusedItem;
                            return newItem;
                        }
                        else {
                            if (focusedItem) {
                                focusedItem.selected = false;
                                focusedItem.highlighted = false;
                                nextItem.selected = true;
                            }
                        }
                    }
                    else {
                        if (focusedItem) {
                            if (focusedItem.highlighted && !focusedItem.selected) {
                                focusedItem.highlighted = false;
                                focusedItem.selected = true;
                                newItem = focusedItem;
                                return newItem;
                            }
                            else {
                                focusedItem.selected = false;
                                focusedItem.highlighted = false;
                            }
                        }
                        nextItem.selected = true;
                    }
                }
                else {
                    nextItem.highlighted = true;
                    if (focusedItem) {
                        focusedItem.highlighted = false;
                    }
                }
                newItem = nextItem;
            }
        }
        else if (event.key === "ArrowUp") {
            event.preventDefault();
            if (focusedItem) {
                if (PopupListService.isFirstSelectableItem(this.viewListData, focusedItem)) {
                    return focusedItem;
                }
                const previousItem = PopupListService.findPreviousSelectableItem(this.viewListData, focusedItem);
                if (previousItem) {
                    if (selectionMode === "single") {
                        if (this.filterModeActive) {
                            if (focusedItem.highlighted && !focusedItem.selected) {
                                focusedItem.highlighted = false;
                                focusedItem.selected = true;
                                newItem = focusedItem;
                                return newItem;
                            }
                            else {
                                focusedItem.selected = false;
                                focusedItem.highlighted = false;
                                previousItem.selected = true;
                            }
                        }
                        else {
                            if (focusedItem.highlighted && !focusedItem.selected) {
                                focusedItem.highlighted = false;
                                focusedItem.selected = true;
                                newItem = focusedItem;
                                return newItem;
                            }
                            else {
                                focusedItem.selected = false;
                                previousItem.selected = true;
                            }
                        }
                    }
                    else {
                        focusedItem.highlighted = false;
                        previousItem.highlighted = true;
                    }
                    newItem = previousItem;
                }
            }
        }
        return newItem;
    }
    selectItem(item, selectionMode) {
        if (selectionMode === "single") {
            this.viewListData.selectMany(g => g.source).forEach(i => (i.selected = false));
            item.selected = true;
        }
        else {
            item.selected = !item.selected;
        }
    }
    updateDisabledItems(disablerAction) {
        this.sourceListData.selectMany(g => g.source).forEach(i => (i.disabled = disablerAction(i.data)));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: PopupListService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: PopupListService }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: PopupListService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,