import { ChangeDetectionStrategy, Component, ContentChild, EventEmitter, Input, Output, TemplateRef } from "@angular/core";
import { AbstractDropDownListComponent } from "../../../../components/abstract-drop-down-list/abstract-drop-down-list.component";
import { PopupListService } from "../../../../services/popup-list.service";
import { MultiSelectTagTemplateDirective } from "../../directives/multi-select-tag-template.directive";
import { MultiSelectItemTemplateDirective } from "../../directives/multi-select-item-template.directive";
import { MultiSelectGroupTemplateDirective } from "../../directives/multi-select-group-template.directive";
import * as i0 from "@angular/core";
import * as i1 from "../../../../services/popup-list.service";
import * as i2 from "../../../../../popup/services/popup.service";
import * as i3 from "@angular/common";
import * as i4 from "../../../../../buttons/modules/chip/components/chip/chip.component";
import * as i5 from "@fortawesome/angular-fontawesome";
import * as i6 from "../../../../components/popup-list/popup-list.component";
import * as i7 from "../../../../directives/list-item-template.directive";
import * as i8 from "../../../../directives/list-group-template.directive";
export class MultiSelectComponent extends AbstractDropDownListComponent {
    constructor(elementRef, popupListService, popupService, cdr) {
        super(elementRef, popupListService, popupService);
        this.elementRef = elementRef;
        this.popupListService = popupListService;
        this.popupService = popupService;
        this.cdr = cdr;
        this.resizeObserver = null;
        this.selectionMode = "multiple";
        this.popupListValues = [];
        this.summaryTagTemplate = null;
        this.tagCount = -1;
        this.valuePopupListItem = [];
        this.filterable = false;
        this.tagTemplate = null;
        this.value = [];
        this.valueChange = new EventEmitter();
    }
    ngOnChanges(changes) {
        super.ngOnChanges(changes);
        if (changes["value"]) {
            this.popupListValues = this.value;
            this.valuePopupListItem = this.popupListService.viewListData
                .selectMany(g => g.source)
                .where(d => this.value.some(v => d.dataEquals(v)))
                .toArray();
        }
    }
    ngOnDestroy() {
        super.ngOnDestroy();
        this.resizeObserver?.disconnect();
    }
    ngOnInit() {
        super.ngOnInit();
        this.setEventListeners();
    }
    onPopupListValueChange(event) {
        if (this.value && this.containsValue(event.value, this.value)) {
            if (event.via === "selection") {
                this.close();
            }
            return;
        }
        if (event.via === "selection" && this.selectionMode === "single") {
            this.close();
        }
        this.updateValue(event.value);
        this.popupListValues = event.value;
    }
    onSelectedItemRemove(event, popupListItem) {
        event.stopImmediatePropagation();
        const remainingItems = this.valuePopupListItem.filter(item => !item.dataEquals(popupListItem.data)) ?? [];
        this.updateValue(remainingItems);
    }
    onSelectedItemGroupRemove(event) {
        event.stopImmediatePropagation();
        const remainingItems = this.valuePopupListItem.slice(0, this.visibleTagCount);
        this.updateValue(remainingItems);
    }
    containsValue(popupListItems, value) {
        return popupListItems.some(popupListItem => popupListItem.dataEquals(value));
    }
    setEventListeners() {
        this.resizeObserver = new ResizeObserver(() => {
            window.setTimeout(() => {
                this.popupRef?.overlayRef.updatePosition();
                this.popupRef?.overlayRef.updateSize({ width: this.elementRef.nativeElement.clientWidth });
            });
        });
        this.resizeObserver.observe(this.elementRef.nativeElement);
    }
    get summaryTagText() {
        return this.tagCount < 0
            ? ""
            : this.tagCount === 0
                ? `${this.valuePopupListItem.length} item${this.valuePopupListItem.length === 1 ? "" : "s"}`
                : `+${this.valuePopupListItem.length - this.tagCount} item${this.valuePopupListItem.length - this.tagCount > 1 ? "s" : ""}`;
    }
    get visibleTagCount() {
        return this.tagCount < 0 ? this.valuePopupListItem.length : this.tagCount === 0 ? 0 : this.tagCount;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: MultiSelectComponent, deps: [{ token: i0.ElementRef }, { token: i1.PopupListService }, { token: i2.PopupService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.0.0", type: MultiSelectComponent, selector: "mona-multi-select", inputs: { filterable: "filterable", value: "value" }, outputs: { valueChange: "valueChange" }, providers: [PopupListService], queries: [{ propertyName: "groupTemplate", first: true, predicate: MultiSelectGroupTemplateDirective, descendants: true, read: TemplateRef }, { propertyName: "itemTemplate", first: true, predicate: MultiSelectItemTemplateDirective, descendants: true, read: TemplateRef }, { propertyName: "tagTemplate", first: true, predicate: MultiSelectTagTemplateDirective, descendants: true, read: TemplateRef }], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: "<div class=\"mona-dropdown mona-multi-select mona-input-selector\" [attr.tabindex]=\"disabled ? -1 : 0\"\n     [ngClass]=\"{'mona-disabled': disabled}\"  (click)=\"open()\"\n     #dropdownWrapper>\n    <div class=\"mona-input-selector-value\">\n        <div>\n            <mona-chip *ngFor=\"let item of valuePopupListItem | slice:0:visibleTagCount\"\n                       [tabindex]=\"-1\" [removable]=\"true\" (remove)=\"onSelectedItemRemove($event, item)\">\n                <span *ngIf=\"!tagTemplate\">{{item.text}}</span>\n                <ng-container [ngTemplateOutlet]=\"tagTemplate\" [ngTemplateOutletContext]=\"{$implicit: item.data}\" *ngIf=\"tagTemplate\"></ng-container>\n            </mona-chip>\n            <mona-chip [tabindex]=\"-1\" [removable]=\"true\" (remove)=\"onSelectedItemGroupRemove($event)\"\n                       *ngIf=\"tagCount >= 0 && valuePopupListItem.length > tagCount\">\n                <span *ngIf=\"!summaryTagTemplate\">{{summaryTagText}}</span>\n                <ng-container [ngTemplateOutlet]=\"summaryTagTemplate\" [ngTemplateOutletContext]=\"{$implicit: valuePopupListItem}\"\n                              *ngIf=\"summaryTagTemplate\"></ng-container>\n            </mona-chip>\n        </div>\n    </div>\n    <div class=\"mona-input-selector-icon\">\n        <fa-icon [icon]=\"dropdownIcon\"></fa-icon>\n    </div>\n</div>\n\n<ng-template #popupTemplate>\n    <div *ngIf=\"!!popupRef\">\n        <mona-popup-list [textField]=\"textField\" [valueField]=\"valueField\" [groupField]=\"groupField\" [filterable]=\"filterable\"\n                         [value]=\"popupListValues\" selectionMode=\"multiple\" (valueChange)=\"onPopupListValueChange($event)\">\n            <ng-container *ngIf=\"itemTemplate\">\n                <ng-template monaListItemTemplate let-dataItem let-listItem=\"listItem\">\n                    <ng-container [ngTemplateOutlet]=\"itemTemplate ?? null\"\n                                  [ngTemplateOutletContext]=\"{$implicit: dataItem, listItem}\"></ng-container>\n                </ng-template>\n            </ng-container>\n            <ng-container *ngIf=\"groupTemplate\">\n                <ng-template monaListGroupTemplate let-dataItem let-listItem=\"listItem\">\n                    <ng-container [ngTemplateOutlet]=\"groupTemplate ?? null\"\n                                  [ngTemplateOutletContext]=\"{$implicit: dataItem, listItem}\"></ng-container>\n                </ng-template>\n            </ng-container>\n        </mona-popup-list>\n    </div>\n</ng-template>\n", styles: ["div.mona-input-selector{height:auto;min-height:var(--mona-input-height)}div.mona-input-selector:hover,div.mona-input-selector:active{background-color:var(--mona-background)}div.mona-input-selector-value{padding:0 1px 1px}div.mona-input-selector-value>div:first-child{display:flex;flex-direction:row;flex-wrap:wrap;width:100%;height:100%}div.mona-input-selector-value mona-text-box{flex:1}div.mona-input-selector-value mona-chip:not(:last-child){margin:0 1px 0 0}div.mona-input-selector-icon{min-width:var(--mona-input-height);border-left:1px solid var(--mona-border-color)}\n"], dependencies: [{ kind: "directive", type: i3.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i3.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "component", type: i4.ChipComponent, selector: "mona-chip", inputs: ["disabled", "label", "removable", "tabindex"], outputs: ["remove"] }, { kind: "component", type: i5.FaIconComponent, selector: "fa-icon", inputs: ["icon", "title", "spin", "pulse", "mask", "styles", "flip", "size", "pull", "border", "inverse", "symbol", "rotate", "fixedWidth", "classes", "transform", "a11yRole"] }, { kind: "component", type: i6.PopupListComponent, selector: "mona-popup-list", inputs: ["filterable", "groupField", "highlightedValues", "navigable", "selectionMode", "textField", "value", "valueField"], outputs: ["valueChange"] }, { kind: "directive", type: i7.ListItemTemplateDirective, selector: "ng-template[monaListItemTemplate]" }, { kind: "directive", type: i8.ListGroupTemplateDirective, selector: "ng-template[monaListGroupTemplate]" }, { kind: "pipe", type: i3.SlicePipe, name: "slice" }], changeDetection: i0.ChangeDetectionStrategy.Default }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: MultiSelectComponent, decorators: [{
            type: Component,
            args: [{ selector: "mona-multi-select", providers: [PopupListService], changeDetection: ChangeDetectionStrategy.Default, template: "<div class=\"mona-dropdown mona-multi-select mona-input-selector\" [attr.tabindex]=\"disabled ? -1 : 0\"\n     [ngClass]=\"{'mona-disabled': disabled}\"  (click)=\"open()\"\n     #dropdownWrapper>\n    <div class=\"mona-input-selector-value\">\n        <div>\n            <mona-chip *ngFor=\"let item of valuePopupListItem | slice:0:visibleTagCount\"\n                       [tabindex]=\"-1\" [removable]=\"true\" (remove)=\"onSelectedItemRemove($event, item)\">\n                <span *ngIf=\"!tagTemplate\">{{item.text}}</span>\n                <ng-container [ngTemplateOutlet]=\"tagTemplate\" [ngTemplateOutletContext]=\"{$implicit: item.data}\" *ngIf=\"tagTemplate\"></ng-container>\n            </mona-chip>\n            <mona-chip [tabindex]=\"-1\" [removable]=\"true\" (remove)=\"onSelectedItemGroupRemove($event)\"\n                       *ngIf=\"tagCount >= 0 && valuePopupListItem.length > tagCount\">\n                <span *ngIf=\"!summaryTagTemplate\">{{summaryTagText}}</span>\n                <ng-container [ngTemplateOutlet]=\"summaryTagTemplate\" [ngTemplateOutletContext]=\"{$implicit: valuePopupListItem}\"\n                              *ngIf=\"summaryTagTemplate\"></ng-container>\n            </mona-chip>\n        </div>\n    </div>\n    <div class=\"mona-input-selector-icon\">\n        <fa-icon [icon]=\"dropdownIcon\"></fa-icon>\n    </div>\n</div>\n\n<ng-template #popupTemplate>\n    <div *ngIf=\"!!popupRef\">\n        <mona-popup-list [textField]=\"textField\" [valueField]=\"valueField\" [groupField]=\"groupField\" [filterable]=\"filterable\"\n                         [value]=\"popupListValues\" selectionMode=\"multiple\" (valueChange)=\"onPopupListValueChange($event)\">\n            <ng-container *ngIf=\"itemTemplate\">\n                <ng-template monaListItemTemplate let-dataItem let-listItem=\"listItem\">\n                    <ng-container [ngTemplateOutlet]=\"itemTemplate ?? null\"\n                                  [ngTemplateOutletContext]=\"{$implicit: dataItem, listItem}\"></ng-container>\n                </ng-template>\n            </ng-container>\n            <ng-container *ngIf=\"groupTemplate\">\n                <ng-template monaListGroupTemplate let-dataItem let-listItem=\"listItem\">\n                    <ng-container [ngTemplateOutlet]=\"groupTemplate ?? null\"\n                                  [ngTemplateOutletContext]=\"{$implicit: dataItem, listItem}\"></ng-container>\n                </ng-template>\n            </ng-container>\n        </mona-popup-list>\n    </div>\n</ng-template>\n", styles: ["div.mona-input-selector{height:auto;min-height:var(--mona-input-height)}div.mona-input-selector:hover,div.mona-input-selector:active{background-color:var(--mona-background)}div.mona-input-selector-value{padding:0 1px 1px}div.mona-input-selector-value>div:first-child{display:flex;flex-direction:row;flex-wrap:wrap;width:100%;height:100%}div.mona-input-selector-value mona-text-box{flex:1}div.mona-input-selector-value mona-chip:not(:last-child){margin:0 1px 0 0}div.mona-input-selector-icon{min-width:var(--mona-input-height);border-left:1px solid var(--mona-border-color)}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.PopupListService }, { type: i2.PopupService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { filterable: [{
                type: Input
            }], groupTemplate: [{
                type: ContentChild,
                args: [MultiSelectGroupTemplateDirective, { read: TemplateRef }]
            }], itemTemplate: [{
                type: ContentChild,
                args: [MultiSelectItemTemplateDirective, { read: TemplateRef }]
            }], tagTemplate: [{
                type: ContentChild,
                args: [MultiSelectTagTemplateDirective, { read: TemplateRef }]
            }], value: [{
                type: Input
            }], valueChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,