import { Component, ContentChild, EventEmitter, Input, Output, TemplateRef } from "@angular/core";
import { AbstractDropDownListComponent } from "../../../../components/abstract-drop-down-list/abstract-drop-down-list.component";
import { PopupListService } from "../../../../services/popup-list.service";
import { DropDownListItemTemplateDirective } from "../../directives/drop-down-list-item-template.directive";
import { DropDownListValueTemplateDirective } from "../../directives/drop-down-list-value-template.directive";
import { DropDownListGroupTemplateDirective } from "../../directives/drop-down-list-group-template.directive";
import * as i0 from "@angular/core";
import * as i1 from "../../../../services/popup-list.service";
import * as i2 from "../../../../../popup/services/popup.service";
import * as i3 from "@angular/common";
import * as i4 from "../../../../components/popup-list/popup-list.component";
import * as i5 from "@fortawesome/angular-fontawesome";
import * as i6 from "../../../../directives/list-item-template.directive";
import * as i7 from "../../../../directives/list-group-template.directive";
import * as i8 from "../../../../../buttons/modules/button/directives/button.directive";
export class DropDownListComponent extends AbstractDropDownListComponent {
    constructor(elementRef, popupListService, popupService) {
        super(elementRef, popupListService, popupService);
        this.elementRef = elementRef;
        this.popupListService = popupListService;
        this.popupService = popupService;
        this.openOnEnter = true;
        this.selectionMode = "single";
        this.filterable = false;
        this.valueChange = new EventEmitter();
    }
    clearValue(event) {
        event.stopImmediatePropagation();
        this.updateValue(undefined);
    }
    ngOnInit() {
        super.ngOnInit();
    }
    onPopupListValueChange(event) {
        if (!event.value || event.value.length === 0) {
            this.updateValue(undefined);
            return;
        }
        if (this.value && event.value[0].dataEquals(this.value)) {
            if (event.via === "selection") {
                this.close();
            }
            return;
        }
        if (event.via === "selection") {
            this.close();
        }
        this.updateValue(event.value[0]);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: DropDownListComponent, deps: [{ token: i0.ElementRef }, { token: i1.PopupListService }, { token: i2.PopupService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.0.0", type: DropDownListComponent, selector: "mona-drop-down-list", inputs: { filterable: "filterable", value: "value" }, outputs: { valueChange: "valueChange" }, providers: [PopupListService], queries: [{ propertyName: "groupTemplate", first: true, predicate: DropDownListGroupTemplateDirective, descendants: true, read: TemplateRef }, { propertyName: "itemTemplate", first: true, predicate: DropDownListItemTemplateDirective, descendants: true, read: TemplateRef }, { propertyName: "valueTemplate", first: true, predicate: DropDownListValueTemplateDirective, descendants: true, read: TemplateRef }], usesInheritance: true, ngImport: i0, template: "<div class=\"mona-dropdown mona-dropdown-list mona-input-selector\" [ngClass]=\"{'mona-disabled': disabled}\" [attr.tabindex]=\"disabled ? -1 : 0\" (click)=\"open()\" #dropdownWrapper>\n    <div class=\"mona-input-selector-value\">\n        <ng-container *ngIf=\"!valueTemplate\">\n            <span *ngIf=\"valuePopupListItem\">{{valuePopupListItem?.text}}</span>\n            <span *ngIf=\"!valuePopupListItem\">{{placeholder}}</span>\n        </ng-container>\n        <ng-container *ngIf=\"valueTemplate\">\n            <ng-container [ngTemplateOutlet]=\"valueTemplate\" [ngTemplateOutletContext]=\"{$implicit: valuePopupListItem?.data, listItem: valuePopupListItem}\"></ng-container>\n        </ng-container>\n    </div>\n    <div class=\"mona-input-selector-icon\" *ngIf=\"showClearButton && valuePopupListItem\">\n        <button monaButton [flat]=\"true\" (click)=\"clearValue($event)\" class=\"mona-dropdown-clear-icon\">\n            <fa-icon [icon]=\"clearIcon\"></fa-icon>\n        </button>\n    </div>\n    <div class=\"mona-input-selector-icon\">\n        <fa-icon [icon]=\"dropdownIcon\"></fa-icon>\n    </div>\n</div>\n\n<ng-template #popupTemplate>\n    <div *ngIf=\"!!popupRef\">\n        <mona-popup-list [textField]=\"textField\" [valueField]=\"valueField\" [groupField]=\"groupField\" [value]=\"value ? [value] : []\"\n                         [filterable]=\"filterable\"\n                         (valueChange)=\"onPopupListValueChange($event)\">\n            <ng-container *ngIf=\"itemTemplate\">\n                <ng-template monaListItemTemplate let-dataItem let-listItem=\"listItem\">\n                    <ng-container [ngTemplateOutlet]=\"itemTemplate ?? null\" [ngTemplateOutletContext]=\"{$implicit: dataItem, listItem}\"></ng-container>\n                </ng-template>\n            </ng-container>\n            <ng-container *ngIf=\"groupTemplate\">\n                <ng-template monaListGroupTemplate let-dataItem let-listItem=\"listItem\">\n                    <ng-container [ngTemplateOutlet]=\"groupTemplate ?? null\" [ngTemplateOutletContext]=\"{$implicit: dataItem, listItem}\"></ng-container>\n                </ng-template>\n            </ng-container>\n        </mona-popup-list>\n    </div>\n</ng-template>\n", styles: [""], dependencies: [{ kind: "directive", type: i3.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i3.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "component", type: i4.PopupListComponent, selector: "mona-popup-list", inputs: ["filterable", "groupField", "highlightedValues", "navigable", "selectionMode", "textField", "value", "valueField"], outputs: ["valueChange"] }, { kind: "component", type: i5.FaIconComponent, selector: "fa-icon", inputs: ["icon", "title", "spin", "pulse", "mask", "styles", "flip", "size", "pull", "border", "inverse", "symbol", "rotate", "fixedWidth", "classes", "transform", "a11yRole"] }, { kind: "directive", type: i6.ListItemTemplateDirective, selector: "ng-template[monaListItemTemplate]" }, { kind: "directive", type: i7.ListGroupTemplateDirective, selector: "ng-template[monaListGroupTemplate]" }, { kind: "directive", type: i8.ButtonDirective, selector: "[monaButton]", inputs: ["disabled", "flat", "primary", "selected", "toggleable"], outputs: ["selectedChange"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: DropDownListComponent, decorators: [{
            type: Component,
            args: [{ selector: "mona-drop-down-list", providers: [PopupListService], template: "<div class=\"mona-dropdown mona-dropdown-list mona-input-selector\" [ngClass]=\"{'mona-disabled': disabled}\" [attr.tabindex]=\"disabled ? -1 : 0\" (click)=\"open()\" #dropdownWrapper>\n    <div class=\"mona-input-selector-value\">\n        <ng-container *ngIf=\"!valueTemplate\">\n            <span *ngIf=\"valuePopupListItem\">{{valuePopupListItem?.text}}</span>\n            <span *ngIf=\"!valuePopupListItem\">{{placeholder}}</span>\n        </ng-container>\n        <ng-container *ngIf=\"valueTemplate\">\n            <ng-container [ngTemplateOutlet]=\"valueTemplate\" [ngTemplateOutletContext]=\"{$implicit: valuePopupListItem?.data, listItem: valuePopupListItem}\"></ng-container>\n        </ng-container>\n    </div>\n    <div class=\"mona-input-selector-icon\" *ngIf=\"showClearButton && valuePopupListItem\">\n        <button monaButton [flat]=\"true\" (click)=\"clearValue($event)\" class=\"mona-dropdown-clear-icon\">\n            <fa-icon [icon]=\"clearIcon\"></fa-icon>\n        </button>\n    </div>\n    <div class=\"mona-input-selector-icon\">\n        <fa-icon [icon]=\"dropdownIcon\"></fa-icon>\n    </div>\n</div>\n\n<ng-template #popupTemplate>\n    <div *ngIf=\"!!popupRef\">\n        <mona-popup-list [textField]=\"textField\" [valueField]=\"valueField\" [groupField]=\"groupField\" [value]=\"value ? [value] : []\"\n                         [filterable]=\"filterable\"\n                         (valueChange)=\"onPopupListValueChange($event)\">\n            <ng-container *ngIf=\"itemTemplate\">\n                <ng-template monaListItemTemplate let-dataItem let-listItem=\"listItem\">\n                    <ng-container [ngTemplateOutlet]=\"itemTemplate ?? null\" [ngTemplateOutletContext]=\"{$implicit: dataItem, listItem}\"></ng-container>\n                </ng-template>\n            </ng-container>\n            <ng-container *ngIf=\"groupTemplate\">\n                <ng-template monaListGroupTemplate let-dataItem let-listItem=\"listItem\">\n                    <ng-container [ngTemplateOutlet]=\"groupTemplate ?? null\" [ngTemplateOutletContext]=\"{$implicit: dataItem, listItem}\"></ng-container>\n                </ng-template>\n            </ng-container>\n        </mona-popup-list>\n    </div>\n</ng-template>\n" }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.PopupListService }, { type: i2.PopupService }]; }, propDecorators: { filterable: [{
                type: Input
            }], groupTemplate: [{
                type: ContentChild,
                args: [DropDownListGroupTemplateDirective, { read: TemplateRef }]
            }], itemTemplate: [{
                type: ContentChild,
                args: [DropDownListItemTemplateDirective, { read: TemplateRef }]
            }], value: [{
                type: Input
            }], valueChange: [{
                type: Output
            }], valueTemplate: [{
                type: ContentChild,
                args: [DropDownListValueTemplateDirective, { read: TemplateRef }]
            }] } });
//# sourceMappingURL=data:application/json;base64,