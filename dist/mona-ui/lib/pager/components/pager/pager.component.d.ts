import { EventEmitter, OnChanges, OnInit, SimpleChanges } from "@angular/core";
import { Page } from "../../models/Page";
import { IconDefinition } from "@fortawesome/free-solid-svg-icons";
import { PageChangeEvent } from "../../models/PageChangeEvent";
import { PageSizeChangeEvent } from "../../models/PageSizeChangeEvent";
import { DropDownListComponent } from "../../../dropdowns/modules/drop-down-list/components/drop-down-list/drop-down-list.component";
import * as i0 from "@angular/core";
export declare class PagerComponent implements OnInit, OnChanges {
    private previousPageSize;
    readonly ellipsisIcon: IconDefinition;
    readonly firstPageIcon: IconDefinition;
    readonly lastPageIcon: IconDefinition;
    readonly nextIcon: IconDefinition;
    readonly previousIcon: IconDefinition;
    inputValue: number | null;
    pageCount: number;
    page: number;
    pageSizeValueList: number[];
    pages: Page[];
    firstLast: boolean;
    pageChange: EventEmitter<PageChangeEvent>;
    pageInput: boolean;
    pageSize: number;
    pageSizeChange: EventEmitter<PageSizeChangeEvent>;
    pageSizeDropdownList?: DropDownListComponent;
    previousNext: boolean;
    set pageSizeValues(values: number[] | boolean);
    skip: number;
    total: number;
    type: "numeric" | "input";
    visiblePages: number;
    constructor();
    ngOnChanges(changes: SimpleChanges): void;
    ngOnInit(): void;
    onJumpNextClick(): void;
    onJumpPreviousClick(): void;
    onNextPageClick(): void;
    onPageClick(page: number): void;
    onPageInputBlur(): void;
    onPageSizeValueChange(value: number): void;
    onPreviousPageClick(): void;
    private preparePages;
    private setPage;
    get currentPageDataCountEnd(): number;
    get currentPageDataCountStart(): number;
    static ɵfac: i0.ɵɵFactoryDeclaration<PagerComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<PagerComponent, "mona-pager", never, { "firstLast": { "alias": "firstLast"; "required": false; }; "pageInput": { "alias": "pageInput"; "required": false; }; "pageSize": { "alias": "pageSize"; "required": false; }; "previousNext": { "alias": "previousNext"; "required": false; }; "pageSizeValues": { "alias": "pageSizeValues"; "required": false; }; "skip": { "alias": "skip"; "required": false; }; "total": { "alias": "total"; "required": false; }; "type": { "alias": "type"; "required": false; }; "visiblePages": { "alias": "visiblePages"; "required": false; }; }, { "pageChange": "pageChange"; "pageSizeChange": "pageSizeChange"; }, never, never, false, never>;
}
