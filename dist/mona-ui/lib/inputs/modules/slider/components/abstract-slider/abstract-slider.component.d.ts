import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, NgZone, OnChanges, OnDestroy, OnInit, Renderer2, SimpleChanges, TemplateRef } from "@angular/core";
import { SliderHandlerType } from "../../models/SliderHandlerType";
import { Action } from "../../../../../utils/Action";
import { SliderTick } from "../../models/SliderTick";
import { SliderTrackData } from "../../models/SliderTrackData";
import { SliderLabelPosition } from "../../models/SliderLabelPosition";
import { Orientation } from "../../../../../models/Orientation";
import { ControlValueAccessor } from "@angular/forms";
import * as i0 from "@angular/core";
export declare abstract class AbstractSliderComponent implements OnInit, AfterViewInit, OnChanges, OnDestroy, ControlValueAccessor {
    protected readonly elementRef: ElementRef<HTMLElement>;
    protected readonly renderer: Renderer2;
    protected readonly cdr: ChangeDetectorRef;
    protected readonly zone: NgZone;
    private readonly componentDestroy$;
    private documentMouseMoveListener;
    private previousUserSelect;
    activeHandlerType: SliderHandlerType | null;
    dragging: boolean;
    handlerOnePosition: number;
    handlerTwoPosition: number;
    handlerValues: [number, number];
    initialized: boolean;
    ticks: SliderTick[];
    trackData: SliderTrackData;
    protected abstract propagateChange: Action<any> | null;
    abstract ranged: boolean;
    labelPosition: SliderLabelPosition;
    labelStep: number;
    max: number;
    min: number;
    orientation: Orientation;
    showTicks: boolean;
    private sliderPrimaryHandlerElementRef;
    private sliderSecondaryHandlerElementRef;
    sliderTrackElementRef: ElementRef<HTMLDivElement>;
    step: number;
    private tickListElementRef;
    tickValueTemplate?: TemplateRef<any>;
    abstract value: unknown | null;
    abstract valueChange: EventEmitter<any>;
    protected constructor(elementRef: ElementRef<HTMLElement>, renderer: Renderer2, cdr: ChangeDetectorRef, zone: NgZone);
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    ngOnInit(): void;
    onHandlerKeyDown(event: KeyboardEvent, handlerType: SliderHandlerType): void;
    onHandlerMouseDown(handlerType: SliderHandlerType): void;
    onTickClick(event: MouseEvent, tickElement: HTMLSpanElement): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    writeValue(obj: number | [number, number]): void;
    private calculateTrackData;
    protected ensureCorrectValueType(value: number | [number, number] | null | undefined): void;
    private findClosestTickElement;
    private getClosestHandlerDataToMouse;
    private getHandlerPositionData;
    private prepareTicks;
    private setEventListeners;
    private setSliderValue;
    protected get maxValue(): number;
    protected get minValue(): number;
    protected abstract emitValues(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<AbstractSliderComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AbstractSliderComponent, "ng-component", never, { "labelPosition": { "alias": "labelPosition"; "required": false; }; "labelStep": { "alias": "labelStep"; "required": false; }; "max": { "alias": "max"; "required": false; }; "min": { "alias": "min"; "required": false; }; "orientation": { "alias": "orientation"; "required": false; }; "showTicks": { "alias": "showTicks"; "required": false; }; "step": { "alias": "step"; "required": false; }; }, {}, ["tickValueTemplate"], never, true, never>;
}
