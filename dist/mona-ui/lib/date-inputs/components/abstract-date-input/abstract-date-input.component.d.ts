import { ChangeDetectorRef, ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChanges } from "@angular/core";
import { Subject } from "rxjs";
import { PopupRef } from "../../../popup/models/PopupRef";
import { ControlValueAccessor } from "@angular/forms";
import * as i0 from "@angular/core";
export declare abstract class AbstractDateInputComponent implements OnInit, OnDestroy, OnChanges, ControlValueAccessor {
    #private;
    protected readonly cdr: ChangeDetectorRef;
    protected readonly componentDestroy$: Subject<void>;
    protected popupRef: PopupRef | null;
    currentDateString: string;
    navigatedDate: Date;
    disabled: boolean;
    disabledDates: Iterable<Date>;
    format: string;
    max: Date | null;
    min: Date | null;
    popupAnchor: ElementRef<HTMLDivElement>;
    readonly: boolean;
    set value(date: Date | null);
    get value(): Date | null;
    valueChange: EventEmitter<Date | null>;
    protected constructor(cdr: ChangeDetectorRef);
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    ngOnInit(): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setDisabledState(isDisabled: boolean): void;
    writeValue(obj: any): void;
    protected setCurrentDate(date: Date | null): void;
    protected dateStringEquals(date1: Date | null, date2: Date | null): boolean;
    private setDateValues;
    static ɵfac: i0.ɵɵFactoryDeclaration<AbstractDateInputComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AbstractDateInputComponent, "ng-component", never, { "disabled": { "alias": "disabled"; "required": false; }; "disabledDates": { "alias": "disabledDates"; "required": false; }; "format": { "alias": "format"; "required": false; }; "max": { "alias": "max"; "required": false; }; "min": { "alias": "min"; "required": false; }; "readonly": { "alias": "readonly"; "required": false; }; "value": { "alias": "value"; "required": false; }; }, { "valueChange": "valueChange"; }, never, never, true, never>;
}
