import { EventEmitter } from "@angular/core";
import { Column } from "../models/Column";
import { Dictionary, EnumerableSet } from "@mirei/ts-collections";
import { ColumnFilterState } from "../models/ColumnFilterState";
import { ColumnSortState } from "../models/ColumnSortState";
import { Row } from "../models/Row";
import { SelectableOptions } from "../models/SelectableOptions";
import { Subject } from "rxjs";
import { CompositeFilterDescriptor } from "../../query/filter/FilterDescriptor";
import { SortableOptions } from "../models/SortableOptions";
import { SortDescriptor } from "../../query/sort/SortDescriptor";
import { CellEditEvent } from "../models/CellEditEvent";
import { EditableOptions } from "../models/EditableOptions";
import * as i0 from "@angular/core";
export declare class GridService {
    readonly cellEdit$: Subject<CellEditEvent>;
    readonly selectedRowsChange$: Subject<Row[]>;
    appliedFilters: Dictionary<string, ColumnFilterState>;
    appliedSorts: Dictionary<string, ColumnSortState>;
    columns: Column[];
    editableOptions: EditableOptions;
    filterLoad$: Subject<void>;
    gridHeaderElement?: HTMLDivElement;
    groupColumns: Column[];
    gridGroupExpandState: Dictionary<string, Dictionary<number, boolean>>;
    isInEditMode: boolean;
    pageState: {
        page: number;
        skip: number;
        take: number;
    };
    rows: Row[];
    selectedKeys: EnumerableSet<unknown>;
    selectionKeyField: string;
    selectableOptions: SelectableOptions;
    selectedKeysChange: EventEmitter<unknown[]>;
    selectedRows: Row[];
    sortLoad$: Subject<void>;
    sortableOptions: SortableOptions;
    constructor();
    loadFilters(filters: CompositeFilterDescriptor[]): void;
    loadSelectedKeys(selectedKeys: Iterable<unknown>): void;
    loadSorts(sorts: SortDescriptor[]): void;
    setEditableOptions(options: EditableOptions): void;
    setRows(value: any[]): void;
    setSelectableOptions(options: SelectableOptions): void;
    setSortableOptions(options: SortableOptions): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<GridService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<GridService>;
}
