import { AfterContentInit, AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, QueryList, SimpleChanges } from "@angular/core";
import { GridService } from "../../services/grid.service";
import { IconDefinition } from "@fortawesome/free-solid-svg-icons";
import { Column } from "../../models/Column";
import { SortDescriptor } from "../../../query/sort/SortDescriptor";
import { ColumnFilterState } from "../../models/ColumnFilterState";
import { PageSizeChangeEvent } from "../../../pager/models/PageSizeChangeEvent";
import { PageChangeEvent } from "../../../pager/models/PageChangeEvent";
import { GridColumnComponent } from "../grid-column/grid-column.component";
import { CdkDragDrop, CdkDragEnter, CdkDragStart, CdkDropList } from "@angular/cdk/drag-drop";
import { CompositeFilterDescriptor } from "../../../query/filter/FilterDescriptor";
import { SortableOptions } from "../../models/SortableOptions";
import { CellEditEvent } from "../../models/CellEditEvent";
import * as i0 from "@angular/core";
export declare class GridComponent implements OnInit, AfterViewInit, OnDestroy, OnChanges, AfterContentInit {
    #private;
    readonly gridService: GridService;
    private readonly cdr;
    private readonly elementRef;
    readonly ascendingSortIcon: IconDefinition;
    readonly descendingSortIcon: IconDefinition;
    columnDragging: boolean;
    dragColumn?: Column;
    dropColumn?: Column;
    gridColumns: Column[];
    groupPanelPlaceholderVisible: boolean;
    resizing: boolean;
    cellEdit: EventEmitter<CellEditEvent>;
    columns: QueryList<GridColumnComponent>;
    set data(value: any[]);
    set filter(value: CompositeFilterDescriptor[]);
    get filter(): CompositeFilterDescriptor[];
    filterable: boolean;
    filterChange: EventEmitter<CompositeFilterDescriptor[]>;
    set gridHeaderElement(value: ElementRef<HTMLDivElement>);
    groupColumnList?: CdkDropList;
    groupable: boolean;
    set pageSize(value: number);
    pageSizeValues: number[];
    reorderable: boolean;
    resizable: boolean;
    set sort(value: SortDescriptor[]);
    get sort(): SortDescriptor[];
    sortChange: EventEmitter<SortDescriptor[]>;
    set sortable(options: boolean | SortableOptions);
    constructor(gridService: GridService, cdr: ChangeDetectorRef, elementRef: ElementRef<HTMLElement>);
    ngAfterContentInit(): void;
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    ngOnInit(): void;
    onColumnDragEnter(event: CdkDragEnter<void, Column>, column: Column): void;
    onColumnDragStart(event: CdkDragStart<Column>): void;
    onColumnDrop(event: CdkDragDrop<Column>): void;
    onColumnDropForGrouping(event: CdkDragDrop<Column, void, Column>): void;
    onColumnFilter(column: Column, state: ColumnFilterState): void;
    onColumnMouseEnter(event: MouseEvent, column: Column): void;
    onColumnSort(column: Column): void;
    onGroupingColumnRemove(event: Event, column: Column): void;
    onPageChange(event: PageChangeEvent): void;
    onPageSizeChange(data: PageSizeChangeEvent): void;
    private applyColumnSort;
    private setInitialCalculatedWidthOfColumns;
    private setSubscriptions;
    get headerMargin(): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<GridComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<GridComponent, "mona-grid", never, { "data": { "alias": "data"; "required": false; }; "filter": { "alias": "filter"; "required": false; }; "groupable": { "alias": "groupable"; "required": false; }; "pageSize": { "alias": "pageSize"; "required": false; }; "pageSizeValues": { "alias": "pageSizeValues"; "required": false; }; "reorderable": { "alias": "reorderable"; "required": false; }; "resizable": { "alias": "resizable"; "required": false; }; "sort": { "alias": "sort"; "required": false; }; "sortable": { "alias": "sortable"; "required": false; }; }, { "cellEdit": "cellEdit"; "filterChange": "filterChange"; "sortChange": "sortChange"; }, ["columns"], never, false, never>;
}
