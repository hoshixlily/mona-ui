import { ElementRef, EventEmitter, OnDestroy, OnInit, TemplateRef } from "@angular/core";
import { Node } from "../../data/Node";
import { IconDefinition } from "@fortawesome/free-solid-svg-icons";
import { TreeViewService } from "../../services/tree-view.service";
import { DropPosition } from "../../data/DropPosition";
import { DropPositionChangeEvent } from "../../data/DropPositionChangeEvent";
import { NodeClickEvent } from "../../data/NodeClickEvent";
import { Subject } from "rxjs";
import { Highlightable } from "@angular/cdk/a11y";
import * as i0 from "@angular/core";
export declare class TreeViewNodeComponent implements OnInit, OnDestroy, Highlightable {
    private readonly elementRef;
    readonly treeViewService: TreeViewService;
    private readonly componentDestroy$;
    readonly click$: Subject<MouseEvent>;
    readonly collapseIcon: IconDefinition;
    readonly dropMagnetIcon: IconDefinition;
    readonly expandIcon: IconDefinition;
    dropMagnetVisible: boolean;
    dropPosition?: DropPosition;
    dragging: boolean;
    dropPositionChange: EventEmitter<DropPositionChangeEvent>;
    node: Node;
    nodeClick: EventEmitter<NodeClickEvent>;
    nodeDoubleClick: EventEmitter<NodeClickEvent>;
    nodeSelect: EventEmitter<Node>;
    nodeTextTemplate?: TemplateRef<never> | null;
    constructor(elementRef: ElementRef<HTMLElement>, treeViewService: TreeViewService);
    ngOnDestroy(): void;
    ngOnInit(): void;
    onCheckToggle(checked: boolean): void;
    onExpandToggle(event: MouseEvent): void;
    onMouseEnter(event: MouseEvent): void;
    onMouseLeave(event: MouseEvent): void;
    onMouseMove(event: MouseEvent): void;
    onNodeDoubleClick(event: MouseEvent): void;
    onNodeClick(event: MouseEvent, type: "click" | "contextmenu"): void;
    setActiveStyles(): void;
    setInactiveStyles(): void;
    private setSubscriptions;
    static ɵfac: i0.ɵɵFactoryDeclaration<TreeViewNodeComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TreeViewNodeComponent, "mona-tree-view-node", never, { "dragging": { "alias": "dragging"; "required": false; }; "node": { "alias": "node"; "required": false; }; "nodeTextTemplate": { "alias": "nodeTextTemplate"; "required": false; }; }, { "dropPositionChange": "dropPositionChange"; "nodeClick": "nodeClick"; "nodeDoubleClick": "nodeDoubleClick"; "nodeSelect": "nodeSelect"; }, never, never, false, never>;
}
