import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, QueryList, SimpleChanges, TemplateRef } from "@angular/core";
import { Node } from "../../data/Node";
import { TreeViewService } from "../../services/tree-view.service";
import { Action } from "../../../utils/Action";
import { CdkDragDrop, CdkDragEnd, CdkDragMove, CdkDragStart } from "@angular/cdk/drag-drop";
import { DropPosition } from "../../data/DropPosition";
import { DropPositionChangeEvent } from "../../data/DropPositionChangeEvent";
import { IconDefinition } from "@fortawesome/free-solid-svg-icons";
import { NodeDragStartEvent } from "../../data/NodeDragStartEvent";
import { NodeDragEvent } from "../../data/NodeDragEvent";
import { NodeDropEvent } from "../../data/NodeDropEvent";
import { NodeDragEndEvent } from "../../data/NodeDragEndEvent";
import { NodeClickEvent } from "../../data/NodeClickEvent";
import { TreeViewNodeComponent } from "../tree-view-node/tree-view-node.component";
import * as i0 from "@angular/core";
export declare class TreeViewComponent implements OnInit, OnChanges, AfterViewInit, OnDestroy {
    private readonly cdr;
    private readonly elementRef;
    readonly treeViewService: TreeViewService;
    private readonly componentDestroy$;
    private disabler?;
    private dragNode?;
    private dropTargetNode?;
    private keyManager?;
    readonly dropAfterIcon: IconDefinition;
    readonly dropBeforeIcon: IconDefinition;
    readonly dropInsideIcon: IconDefinition;
    dragging: boolean;
    dropPosition?: DropPosition;
    childrenField: string;
    data: Iterable<any>;
    keyField: string;
    nodeClick: EventEmitter<NodeClickEvent>;
    nodeComponents: QueryList<TreeViewNodeComponent>;
    set nodeDisabler(nodeDisabler: Action<any, boolean> | string);
    nodeDoubleClick: EventEmitter<NodeClickEvent>;
    nodeDrag: EventEmitter<NodeDragEvent>;
    nodeDragEnd: EventEmitter<NodeDragEndEvent>;
    nodeDragStart: EventEmitter<NodeDragStartEvent>;
    nodeDrop: EventEmitter<NodeDropEvent>;
    nodeTextTemplate?: TemplateRef<never> | null;
    textField: string;
    constructor(cdr: ChangeDetectorRef, elementRef: ElementRef<HTMLElement>, treeViewService: TreeViewService);
    private flattenComponents;
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    ngOnInit(): void;
    nodeTrackBy(index: number, item: Node): string;
    onNodeDragEnd(event: CdkDragEnd<Node>): void;
    onNodeDragMove(event: CdkDragMove, node: Node): void;
    onNodeDragStart(event: CdkDragStart<Node>): void;
    onNodeDrop(event: CdkDragDrop<Node, Node, Node>): void;
    onNodeDropPositionChange(event: DropPositionChangeEvent): void;
    onNodeSelect(node: Node): void;
    private prepareNodeList;
    private prepareNodeListRecursively;
    private setEvents;
    private updateDisabledState;
    static ɵfac: i0.ɵɵFactoryDeclaration<TreeViewComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TreeViewComponent, "mona-tree-view", never, { "childrenField": { "alias": "childrenField"; "required": false; }; "data": { "alias": "data"; "required": false; }; "keyField": { "alias": "keyField"; "required": false; }; "nodeDisabler": { "alias": "nodeDisabler"; "required": false; }; "textField": { "alias": "textField"; "required": false; }; }, { "nodeClick": "nodeClick"; "nodeDoubleClick": "nodeDoubleClick"; "nodeDrag": "nodeDrag"; "nodeDragEnd": "nodeDragEnd"; "nodeDragStart": "nodeDragStart"; "nodeDrop": "nodeDrop"; }, ["nodeTextTemplate"], never, false, never>;
}
