import { EventEmitter } from "@angular/core";
import { CheckableOptions } from "../data/CheckableOptions";
import { Dictionary, EnumerableSet } from "@mirei/ts-collections";
import { Node } from "../data/Node";
import { SelectableOptions } from "../data/SelectableOptions";
import { NodeDisabler, NodeDisablerAction } from "../data/NodeDisabler";
import * as i0 from "@angular/core";
export declare class TreeViewService {
    checkableOptions: CheckableOptions;
    checkedKeys: EnumerableSet<string>;
    checkedKeysChange: EventEmitter<string[]>;
    disabledKeys: EnumerableSet<string>;
    expandedKeys: EnumerableSet<string>;
    expandedKeysChange: EventEmitter<string[]>;
    lastSelectedNode?: Node;
    nodeDictionary: Dictionary<string, Node>;
    nodeList: Node[];
    selectableOptions: SelectableOptions;
    selectedKeys: EnumerableSet<string>;
    selectedKeysChange: EventEmitter<string[]>;
    viewNodeList: Node[];
    constructor();
    static getNodeDisablerAction(disabler: NodeDisabler): NodeDisablerAction;
    loadCheckedKeys(checkedKeys: Iterable<string>): void;
    loadDisabledKeys(disabledKeys: Iterable<string>): void;
    loadExpandedKeys(expandedKeys: Iterable<string>): void;
    loadSelectedKeys(selectedKeys: Iterable<string>): void;
    setCheckableOptions(options: CheckableOptions): void;
    setSelectableOptions(options: SelectableOptions): void;
    toggleNodeCheck(node: Node, checked?: boolean): void;
    toggleNodeExpand(node: Node, expand?: boolean): void;
    toggleNodeSelection(node: Node): void;
    uncheckAllNodes(): void;
    updateNodeCheckStatus(node: Node): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<TreeViewService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<TreeViewService>;
}
