import { ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChanges, TemplateRef } from "@angular/core";
import { IconDefinition } from "@fortawesome/free-solid-svg-icons";
import { PopupRef } from "../../../popup/models/PopupRef";
import { PopupService } from "../../../popup/services/popup.service";
import { PopupSettings } from "../../../popup/models/PopupSettings";
import { PopupListService } from "../../services/popup-list.service";
import { Subject } from "rxjs";
import { SelectionMode } from "../../../models/SelectionMode";
import { Action } from "../../../utils/Action";
import { PopupListItem } from "../../data/PopupListItem";
import * as i0 from "@angular/core";
export declare abstract class AbstractDropDownListComponent implements OnInit, OnDestroy, OnChanges {
    protected readonly elementRef: ElementRef<HTMLElement>;
    protected readonly popupListService: PopupListService;
    protected readonly popupService: PopupService;
    protected readonly componentDestroy$: Subject<void>;
    protected currentValue?: any | any[];
    protected navigateWhileClosed: boolean;
    protected openOnEnter: boolean;
    readonly clearIcon: IconDefinition;
    readonly dropdownIcon: IconDefinition;
    popupRef: PopupRef | null;
    data: Iterable<any>;
    disabled: boolean;
    dropdownWrapper: ElementRef<HTMLDivElement>;
    groupField?: string;
    itemDisabler?: Action<any, boolean> | string;
    placeholder?: string;
    popupTemplate: TemplateRef<any>;
    showClearButton: boolean;
    textField?: string;
    valueField?: string;
    protected abstract selectionMode: SelectionMode;
    abstract valuePopupListItem?: PopupListItem | PopupListItem[];
    abstract value?: any | any[];
    abstract valueChange: EventEmitter<any | any[]>;
    protected constructor(elementRef: ElementRef<HTMLElement>, popupListService: PopupListService, popupService: PopupService);
    close(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    ngOnInit(): void;
    open(options?: Partial<PopupSettings>): PopupRef;
    protected setEvents(): void;
    protected updateValue(listItem: PopupListItem | PopupListItem[] | null | undefined): void;
    protected updateValuePopupListItems(): void;
    setValue(value: any | any[] | undefined): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<AbstractDropDownListComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AbstractDropDownListComponent, "mona-abstract-drop-down-list", never, { "data": { "alias": "data"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "groupField": { "alias": "groupField"; "required": false; }; "itemDisabler": { "alias": "itemDisabler"; "required": false; }; "placeholder": { "alias": "placeholder"; "required": false; }; "showClearButton": { "alias": "showClearButton"; "required": false; }; "textField": { "alias": "textField"; "required": false; }; "valueField": { "alias": "valueField"; "required": false; }; }, {}, never, never, true, never>;
}
